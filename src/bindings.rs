/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl <T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl <T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __IncompleteArrayField<T> { }
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const KHRONOS_TITLE: &'static [u8; 13usize] = b"KhronosTitle\x00";
pub const KHRONOS_ALBUM: &'static [u8; 13usize] = b"KhronosAlbum\x00";
pub const KHRONOS_TRACK_NUMBER: &'static [u8; 19usize] =
    b"KhronosTrackNumber\x00";
pub const KHRONOS_ARTIST: &'static [u8; 14usize] = b"KhronosArtist\x00";
pub const KHRONOS_GENRE: &'static [u8; 13usize] = b"KhronosGenre\x00";
pub const KHRONOS_YEAR: &'static [u8; 12usize] = b"KhronosYear\x00";
pub const KHRONOS_COMMENT: &'static [u8; 15usize] = b"KhronosComment\x00";
pub const KHRONOS_ARTIST_URL: &'static [u8; 17usize] =
    b"KhronosArtistURL\x00";
pub const KHRONOS_CONTENT_URL: &'static [u8; 18usize] =
    b"KhronosContentURL\x00";
pub const KHRONOS_RATING: &'static [u8; 14usize] = b"KhronosRating\x00";
pub const KHRONOS_ALBUM_ART: &'static [u8; 16usize] = b"KhronosAlbumArt\x00";
pub const KHRONOS_COPYRIGHT: &'static [u8; 17usize] = b"KhronosCopyright\x00";
pub const SL_NODE_PARENT: ::std::os::raw::c_uint = 4294967295;
pub const ANDROID_KEY_PCMFORMAT_NUMCHANNELS: &'static [u8; 28usize] =
    b"AndroidPcmFormatNumChannels\x00";
pub const ANDROID_KEY_PCMFORMAT_SAMPLERATE: &'static [u8; 27usize] =
    b"AndroidPcmFormatSampleRate\x00";
pub const ANDROID_KEY_PCMFORMAT_BITSPERSAMPLE: &'static [u8; 30usize] =
    b"AndroidPcmFormatBitsPerSample\x00";
pub const ANDROID_KEY_PCMFORMAT_CONTAINERSIZE: &'static [u8; 30usize] =
    b"AndroidPcmFormatContainerSize\x00";
pub const ANDROID_KEY_PCMFORMAT_CHANNELMASK: &'static [u8; 28usize] =
    b"AndroidPcmFormatChannelMask\x00";
pub const ANDROID_KEY_PCMFORMAT_ENDIANNESS: &'static [u8; 27usize] =
    b"AndroidPcmFormatEndianness\x00";
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uint = 16;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT64_MAX: ::std::os::raw::c_int = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const RSIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const JNI_FALSE: ::std::os::raw::c_uint = 0;
pub const JNI_TRUE: ::std::os::raw::c_uint = 1;
pub const JNI_VERSION_1_1: ::std::os::raw::c_uint = 65537;
pub const JNI_VERSION_1_2: ::std::os::raw::c_uint = 65538;
pub const JNI_VERSION_1_4: ::std::os::raw::c_uint = 65540;
pub const JNI_VERSION_1_6: ::std::os::raw::c_uint = 65542;
pub const JNI_OK: ::std::os::raw::c_uint = 0;
pub const JNI_ERR: ::std::os::raw::c_int = -1;
pub const JNI_EDETACHED: ::std::os::raw::c_int = -2;
pub const JNI_EVERSION: ::std::os::raw::c_int = -3;
pub const JNI_COMMIT: ::std::os::raw::c_uint = 1;
pub const JNI_ABORT: ::std::os::raw::c_uint = 2;
pub const SL_ANDROID_JAVA_PROXY_ROUTING: ::std::os::raw::c_uint = 1;
pub type sl_uint8_t = ::std::os::raw::c_uchar;
pub type sl_int8_t = ::std::os::raw::c_schar;
pub type sl_uint16_t = ::std::os::raw::c_ushort;
pub type sl_int16_t = ::std::os::raw::c_short;
pub type sl_uint32_t = ::std::os::raw::c_uint;
pub type sl_int32_t = ::std::os::raw::c_int;
pub type sl_int64_t = ::std::os::raw::c_longlong;
pub type sl_uint64_t = ::std::os::raw::c_ulonglong;
pub type SLint8 = sl_int8_t;
pub type SLuint8 = sl_uint8_t;
pub type SLint16 = sl_int16_t;
pub type SLuint16 = sl_uint16_t;
pub type SLint32 = sl_int32_t;
pub type SLuint32 = sl_uint32_t;
pub type SLboolean = SLuint32;
pub type SLchar = SLuint8;
pub type SLmillibel = SLint16;
pub type SLmillisecond = SLuint32;
pub type SLmilliHertz = SLuint32;
pub type SLmillimeter = SLint32;
pub type SLmillidegree = SLint32;
pub type SLpermille = SLint16;
pub type SLmicrosecond = SLuint32;
pub type SLresult = SLuint32;
/** Interface ID defined as a UUID */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLInterfaceID_ {
    pub time_low: SLuint32,
    pub time_mid: SLuint16,
    pub time_hi_and_version: SLuint16,
    pub clock_seq: SLuint16,
    pub node: [SLuint8; 6usize],
}
#[test]
fn bindgen_test_layout_SLInterfaceID_() {
    assert_eq!(::std::mem::size_of::<SLInterfaceID_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( SLInterfaceID_ ) ));
    assert_eq! (::std::mem::align_of::<SLInterfaceID_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( SLInterfaceID_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLInterfaceID_ ) ) . time_low as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLInterfaceID_ ) , "::"
                , stringify ! ( time_low ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLInterfaceID_ ) ) . time_mid as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLInterfaceID_ ) , "::"
                , stringify ! ( time_mid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLInterfaceID_ ) ) . time_hi_and_version
                as * const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( SLInterfaceID_ ) , "::"
                , stringify ! ( time_hi_and_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLInterfaceID_ ) ) . clock_seq as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLInterfaceID_ ) , "::"
                , stringify ! ( clock_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLInterfaceID_ ) ) . node as * const _ as
                usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( SLInterfaceID_ ) , "::"
                , stringify ! ( node ) ));
}
impl Clone for SLInterfaceID_ {
    fn clone(&self) -> Self { *self }
}
pub type SLInterfaceID = *const SLInterfaceID_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLObjectItf_ {
    pub Realize: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLObjectItf,
                                                            async: SLboolean)
                                           -> SLresult>,
    pub Resume: ::std::option::Option<unsafe extern "C" fn(self_: SLObjectItf,
                                                           async: SLboolean)
                                          -> SLresult>,
    pub GetState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLObjectItf,
                                                             pState:
                                                                 *mut SLuint32)
                                            -> SLresult>,
    pub GetInterface: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLObjectItf,
                                                                 iid:
                                                                     SLInterfaceID,
                                                                 pInterface:
                                                                     *mut ::std::os::raw::c_void)
                                                -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLObjectItf,
                                                                     callback:
                                                                         slObjectCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
    pub AbortAsyncOperation: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLObjectItf)>,
    pub Destroy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLObjectItf)>,
    pub SetPriority: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLObjectItf,
                                                                priority:
                                                                    SLint32,
                                                                preemptable:
                                                                    SLboolean)
                                               -> SLresult>,
    pub GetPriority: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLObjectItf,
                                                                pPriority:
                                                                    *mut SLint32,
                                                                pPreemptable:
                                                                    *mut SLboolean)
                                               -> SLresult>,
    pub SetLossOfControlInterfaces: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   SLObjectItf,
                                                                               numInterfaces:
                                                                                   SLint16,
                                                                               pInterfaceIDs:
                                                                                   *mut SLInterfaceID,
                                                                               enabled:
                                                                                   SLboolean)
                                                              -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLObjectItf_() {
    assert_eq!(::std::mem::size_of::<SLObjectItf_>() , 80usize , concat ! (
               "Size of: " , stringify ! ( SLObjectItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLObjectItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLObjectItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . Realize as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( Realize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . Resume as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( Resume ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . GetState as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( GetState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . GetInterface as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( GetInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . RegisterCallback as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( RegisterCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . AbortAsyncOperation as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( AbortAsyncOperation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . Destroy as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( Destroy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . SetPriority as * const
                _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( SetPriority ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) . GetPriority as * const
                _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( GetPriority ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLObjectItf_ ) ) .
                SetLossOfControlInterfaces as * const _ as usize } , 72usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLObjectItf_ ) , "::" ,
                stringify ! ( SetLossOfControlInterfaces ) ));
}
impl Clone for SLObjectItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLObjectItf = *const *const SLObjectItf_;
extern "C" {
    pub static SL_IID_NULL: SLInterfaceID;
}
/** URI-based data locator definition where locatorType must be SL_DATALOCATOR_URI*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_URI_ {
    pub locatorType: SLuint32,
    pub URI: *mut SLchar,
}
#[test]
fn bindgen_test_layout_SLDataLocator_URI_() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_URI_>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( SLDataLocator_URI_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_URI_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLDataLocator_URI_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_URI_ ) ) . locatorType as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_URI_ ) ,
                "::" , stringify ! ( locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_URI_ ) ) . URI as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_URI_ ) ,
                "::" , stringify ! ( URI ) ));
}
impl Clone for SLDataLocator_URI_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataLocator_URI = SLDataLocator_URI_;
/** Address-based data locator definition where locatorType must be SL_DATALOCATOR_ADDRESS*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_Address_ {
    pub locatorType: SLuint32,
    pub pAddress: *mut ::std::os::raw::c_void,
    pub length: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataLocator_Address_() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_Address_>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( SLDataLocator_Address_ )
               ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_Address_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLDataLocator_Address_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_Address_ ) ) . locatorType
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_Address_
                ) , "::" , stringify ! ( locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_Address_ ) ) . pAddress as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_Address_
                ) , "::" , stringify ! ( pAddress ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_Address_ ) ) . length as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_Address_
                ) , "::" , stringify ! ( length ) ));
}
impl Clone for SLDataLocator_Address_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataLocator_Address = SLDataLocator_Address_;
/** IODevice-based data locator definition where locatorType must be SL_DATALOCATOR_IODEVICE*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_IODevice_ {
    pub locatorType: SLuint32,
    pub deviceType: SLuint32,
    pub deviceID: SLuint32,
    pub device: SLObjectItf,
}
#[test]
fn bindgen_test_layout_SLDataLocator_IODevice_() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_IODevice_>() , 24usize ,
               concat ! (
               "Size of: " , stringify ! ( SLDataLocator_IODevice_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_IODevice_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLDataLocator_IODevice_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_IODevice_ ) ) . locatorType
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_IODevice_
                ) , "::" , stringify ! ( locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_IODevice_ ) ) . deviceType
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_IODevice_
                ) , "::" , stringify ! ( deviceType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_IODevice_ ) ) . deviceID as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_IODevice_
                ) , "::" , stringify ! ( deviceID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_IODevice_ ) ) . device as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_IODevice_
                ) , "::" , stringify ! ( device ) ));
}
impl Clone for SLDataLocator_IODevice_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataLocator_IODevice = SLDataLocator_IODevice_;
/** OutputMix-based data locator definition where locatorType must be SL_DATALOCATOR_OUTPUTMIX*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_OutputMix {
    pub locatorType: SLuint32,
    pub outputMix: SLObjectItf,
}
#[test]
fn bindgen_test_layout_SLDataLocator_OutputMix() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_OutputMix>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( SLDataLocator_OutputMix ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_OutputMix>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLDataLocator_OutputMix ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_OutputMix ) ) . locatorType
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_OutputMix
                ) , "::" , stringify ! ( locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_OutputMix ) ) . outputMix
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataLocator_OutputMix
                ) , "::" , stringify ! ( outputMix ) ));
}
impl Clone for SLDataLocator_OutputMix {
    fn clone(&self) -> Self { *self }
}
/** BufferQueue-based data locator definition where locatorType must be SL_DATALOCATOR_BUFFERQUEUE*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_BufferQueue {
    pub locatorType: SLuint32,
    pub numBuffers: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataLocator_BufferQueue() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_BufferQueue>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( SLDataLocator_BufferQueue ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_BufferQueue>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLDataLocator_BufferQueue )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_BufferQueue ) ) .
                locatorType as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_BufferQueue ) , "::" , stringify ! ( locatorType
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_BufferQueue ) ) .
                numBuffers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_BufferQueue ) , "::" , stringify ! ( numBuffers
                ) ));
}
impl Clone for SLDataLocator_BufferQueue {
    fn clone(&self) -> Self { *self }
}
/** MidiBufferQueue-based data locator definition where locatorType must be SL_DATALOCATOR_MIDIBUFFERQUEUE*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_MIDIBufferQueue {
    pub locatorType: SLuint32,
    pub tpqn: SLuint32,
    pub numBuffers: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataLocator_MIDIBufferQueue() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_MIDIBufferQueue>() ,
               12usize , concat ! (
               "Size of: " , stringify ! ( SLDataLocator_MIDIBufferQueue ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_MIDIBufferQueue>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( SLDataLocator_MIDIBufferQueue
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_MIDIBufferQueue ) ) .
                locatorType as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_MIDIBufferQueue ) , "::" , stringify ! (
                locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_MIDIBufferQueue ) ) . tpqn
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_MIDIBufferQueue ) , "::" , stringify ! ( tpqn )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_MIDIBufferQueue ) ) .
                numBuffers as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_MIDIBufferQueue ) , "::" , stringify ! (
                numBuffers ) ));
}
impl Clone for SLDataLocator_MIDIBufferQueue {
    fn clone(&self) -> Self { *self }
}
/** MIME-type-based data format definition where formatType must be SL_DATAFORMAT_MIME*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataFormat_MIME_ {
    pub formatType: SLuint32,
    pub mimeType: *mut SLchar,
    pub containerType: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataFormat_MIME_() {
    assert_eq!(::std::mem::size_of::<SLDataFormat_MIME_>() , 24usize , concat
               ! ( "Size of: " , stringify ! ( SLDataFormat_MIME_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataFormat_MIME_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLDataFormat_MIME_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_MIME_ ) ) . formatType as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_MIME_ ) ,
                "::" , stringify ! ( formatType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_MIME_ ) ) . mimeType as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_MIME_ ) ,
                "::" , stringify ! ( mimeType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_MIME_ ) ) . containerType as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_MIME_ ) ,
                "::" , stringify ! ( containerType ) ));
}
impl Clone for SLDataFormat_MIME_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataFormat_MIME = SLDataFormat_MIME_;
/** PCM-type-based data format definition where formatType must be SL_DATAFORMAT_PCM*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataFormat_PCM_ {
    pub formatType: SLuint32,
    pub numChannels: SLuint32,
    pub samplesPerSec: SLuint32,
    pub bitsPerSample: SLuint32,
    pub containerSize: SLuint32,
    pub channelMask: SLuint32,
    pub endianness: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataFormat_PCM_() {
    assert_eq!(::std::mem::size_of::<SLDataFormat_PCM_>() , 28usize , concat !
               ( "Size of: " , stringify ! ( SLDataFormat_PCM_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataFormat_PCM_>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( SLDataFormat_PCM_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . formatType as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( formatType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . numChannels as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( numChannels ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . samplesPerSec as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( samplesPerSec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . bitsPerSample as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( bitsPerSample ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . containerSize as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( containerSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . channelMask as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( channelMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataFormat_PCM_ ) ) . endianness as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataFormat_PCM_ ) ,
                "::" , stringify ! ( endianness ) ));
}
impl Clone for SLDataFormat_PCM_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataFormat_PCM = SLDataFormat_PCM_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataSource_ {
    pub pLocator: *mut ::std::os::raw::c_void,
    pub pFormat: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SLDataSource_() {
    assert_eq!(::std::mem::size_of::<SLDataSource_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( SLDataSource_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataSource_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLDataSource_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataSource_ ) ) . pLocator as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataSource_ ) , "::"
                , stringify ! ( pLocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataSource_ ) ) . pFormat as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataSource_ ) , "::"
                , stringify ! ( pFormat ) ));
}
impl Clone for SLDataSource_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataSource = SLDataSource_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataSink_ {
    pub pLocator: *mut ::std::os::raw::c_void,
    pub pFormat: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SLDataSink_() {
    assert_eq!(::std::mem::size_of::<SLDataSink_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( SLDataSink_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataSink_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLDataSink_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataSink_ ) ) . pLocator as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataSink_ ) , "::" ,
                stringify ! ( pLocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataSink_ ) ) . pFormat as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDataSink_ ) , "::" ,
                stringify ! ( pFormat ) ));
}
impl Clone for SLDataSink_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataSink = SLDataSink_;
extern "C" {
    pub static SL_IID_OBJECT: SLInterfaceID;
}
/** Object callback */
pub type slObjectCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLObjectItf,
                                               pContext:
                                                   *const ::std::os::raw::c_void,
                                               event: SLuint32,
                                               result: SLresult,
                                               param: SLuint32,
                                               pInterface:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioInputDescriptor_ {
    pub deviceName: *mut SLchar,
    pub deviceConnection: SLint16,
    pub deviceScope: SLint16,
    pub deviceLocation: SLint16,
    pub isForTelephony: SLboolean,
    pub minSampleRate: SLmilliHertz,
    pub maxSampleRate: SLmilliHertz,
    pub isFreqRangeContinuous: SLboolean,
    pub samplingRatesSupported: *mut SLmilliHertz,
    pub numOfSamplingRatesSupported: SLint16,
    pub maxChannels: SLint16,
}
#[test]
fn bindgen_test_layout_SLAudioInputDescriptor_() {
    assert_eq!(::std::mem::size_of::<SLAudioInputDescriptor_>() , 48usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAudioInputDescriptor_ ) ));
    assert_eq! (::std::mem::align_of::<SLAudioInputDescriptor_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAudioInputDescriptor_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) . deviceName
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( deviceName ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                deviceConnection as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( deviceConnection ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) . deviceScope
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( deviceScope ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                deviceLocation as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( deviceLocation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                isForTelephony as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( isForTelephony ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                minSampleRate as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( minSampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                maxSampleRate as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( maxSampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                isFreqRangeContinuous as * const _ as usize } , 28usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( isFreqRangeContinuous ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                samplingRatesSupported as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( samplingRatesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) .
                numOfSamplingRatesSupported as * const _ as usize } , 40usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( numOfSamplingRatesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioInputDescriptor_ ) ) . maxChannels
                as * const _ as usize } , 42usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioInputDescriptor_
                ) , "::" , stringify ! ( maxChannels ) ));
}
impl Clone for SLAudioInputDescriptor_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioInputDescriptor = SLAudioInputDescriptor_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioOutputDescriptor_ {
    pub pDeviceName: *mut SLchar,
    pub deviceConnection: SLint16,
    pub deviceScope: SLint16,
    pub deviceLocation: SLint16,
    pub isForTelephony: SLboolean,
    pub minSampleRate: SLmilliHertz,
    pub maxSampleRate: SLmilliHertz,
    pub isFreqRangeContinuous: SLboolean,
    pub samplingRatesSupported: *mut SLmilliHertz,
    pub numOfSamplingRatesSupported: SLint16,
    pub maxChannels: SLint16,
}
#[test]
fn bindgen_test_layout_SLAudioOutputDescriptor_() {
    assert_eq!(::std::mem::size_of::<SLAudioOutputDescriptor_>() , 48usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAudioOutputDescriptor_ ) ));
    assert_eq! (::std::mem::align_of::<SLAudioOutputDescriptor_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAudioOutputDescriptor_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                pDeviceName as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! ( pDeviceName
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                deviceConnection as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                deviceConnection ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                deviceScope as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! ( deviceScope
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                deviceLocation as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                deviceLocation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                isForTelephony as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                isForTelephony ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                minSampleRate as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                minSampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                maxSampleRate as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                maxSampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                isFreqRangeContinuous as * const _ as usize } , 28usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                isFreqRangeContinuous ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                samplingRatesSupported as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                samplingRatesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                numOfSamplingRatesSupported as * const _ as usize } , 40usize
                , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! (
                numOfSamplingRatesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioOutputDescriptor_ ) ) .
                maxChannels as * const _ as usize } , 42usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioOutputDescriptor_ ) , "::" , stringify ! ( maxChannels
                ) ));
}
impl Clone for SLAudioOutputDescriptor_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioOutputDescriptor = SLAudioOutputDescriptor_;
extern "C" {
    pub static SL_IID_AUDIOIODEVICECAPABILITIES: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioIODeviceCapabilitiesItf_ {
    pub GetAvailableAudioInputs: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLAudioIODeviceCapabilitiesItf,
                                                                            pNumInputs:
                                                                                *mut SLint32,
                                                                            pInputDeviceIDs:
                                                                                *mut SLuint32)
                                                           -> SLresult>,
    pub QueryAudioInputCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLAudioIODeviceCapabilitiesItf,
                                                                                deviceId:
                                                                                    SLuint32,
                                                                                pDescriptor:
                                                                                    *mut SLAudioInputDescriptor)
                                                               -> SLresult>,
    pub RegisterAvailableAudioInputsChangedCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                                    SLAudioIODeviceCapabilitiesItf,
                                                                                                callback:
                                                                                                    slAvailableAudioInputsChangedCallback,
                                                                                                pContext:
                                                                                                    *mut ::std::os::raw::c_void)
                                                                               ->
                                                                                   SLresult>,
    pub GetAvailableAudioOutputs: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 SLAudioIODeviceCapabilitiesItf,
                                                                             pNumOutputs:
                                                                                 *mut SLint32,
                                                                             pOutputDeviceIDs:
                                                                                 *mut SLuint32)
                                                            -> SLresult>,
    pub QueryAudioOutputCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     SLAudioIODeviceCapabilitiesItf,
                                                                                 deviceId:
                                                                                     SLuint32,
                                                                                 pDescriptor:
                                                                                     *mut SLAudioOutputDescriptor)
                                                                -> SLresult>,
    pub RegisterAvailableAudioOutputsChangedCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                                     SLAudioIODeviceCapabilitiesItf,
                                                                                                 callback:
                                                                                                     slAvailableAudioOutputsChangedCallback,
                                                                                                 pContext:
                                                                                                     *mut ::std::os::raw::c_void)
                                                                                ->
                                                                                    SLresult>,
    pub RegisterDefaultDeviceIDMapChangedCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                                  SLAudioIODeviceCapabilitiesItf,
                                                                                              callback:
                                                                                                  slDefaultDeviceIDMapChangedCallback,
                                                                                              pContext:
                                                                                                  *mut ::std::os::raw::c_void)
                                                                             ->
                                                                                 SLresult>,
    pub GetAssociatedAudioInputs: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 SLAudioIODeviceCapabilitiesItf,
                                                                             deviceId:
                                                                                 SLuint32,
                                                                             pNumAudioInputs:
                                                                                 *mut SLint32,
                                                                             pAudioInputDeviceIDs:
                                                                                 *mut SLuint32)
                                                            -> SLresult>,
    pub GetAssociatedAudioOutputs: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  SLAudioIODeviceCapabilitiesItf,
                                                                              deviceId:
                                                                                  SLuint32,
                                                                              pNumAudioOutputs:
                                                                                  *mut SLint32,
                                                                              pAudioOutputDeviceIDs:
                                                                                  *mut SLuint32)
                                                             -> SLresult>,
    pub GetDefaultAudioDevices: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               SLAudioIODeviceCapabilitiesItf,
                                                                           defaultDeviceID:
                                                                               SLuint32,
                                                                           pNumAudioDevices:
                                                                               *mut SLint32,
                                                                           pAudioDeviceIDs:
                                                                               *mut SLuint32)
                                                          -> SLresult>,
    pub QuerySampleFormatsSupported: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLAudioIODeviceCapabilitiesItf,
                                                                                deviceId:
                                                                                    SLuint32,
                                                                                samplingRate:
                                                                                    SLmilliHertz,
                                                                                pSampleFormats:
                                                                                    *mut SLint32,
                                                                                pNumOfSampleFormats:
                                                                                    *mut SLint32)
                                                               -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAudioIODeviceCapabilitiesItf_() {
    assert_eq!(::std::mem::size_of::<SLAudioIODeviceCapabilitiesItf_>() ,
               88usize , concat ! (
               "Size of: " , stringify ! ( SLAudioIODeviceCapabilitiesItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAudioIODeviceCapabilitiesItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                GetAvailableAudioInputs as * const _ as usize } , 0usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                GetAvailableAudioInputs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                QueryAudioInputCapabilities as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                QueryAudioInputCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                RegisterAvailableAudioInputsChangedCallback as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                RegisterAvailableAudioInputsChangedCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                GetAvailableAudioOutputs as * const _ as usize } , 24usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                GetAvailableAudioOutputs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                QueryAudioOutputCapabilities as * const _ as usize } , 32usize
                , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                QueryAudioOutputCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                RegisterAvailableAudioOutputsChangedCallback as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                RegisterAvailableAudioOutputsChangedCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                RegisterDefaultDeviceIDMapChangedCallback as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                RegisterDefaultDeviceIDMapChangedCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                GetAssociatedAudioInputs as * const _ as usize } , 56usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                GetAssociatedAudioInputs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                GetAssociatedAudioOutputs as * const _ as usize } , 64usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                GetAssociatedAudioOutputs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                GetDefaultAudioDevices as * const _ as usize } , 72usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                GetDefaultAudioDevices ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioIODeviceCapabilitiesItf_ ) ) .
                QuerySampleFormatsSupported as * const _ as usize } , 80usize
                , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioIODeviceCapabilitiesItf_ ) , "::" , stringify ! (
                QuerySampleFormatsSupported ) ));
}
impl Clone for SLAudioIODeviceCapabilitiesItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioIODeviceCapabilitiesItf =
    *const *const SLAudioIODeviceCapabilitiesItf_;
pub type slAvailableAudioInputsChangedCallback =
    ::std::option::Option<unsafe extern "C" fn(caller:
                                                   SLAudioIODeviceCapabilitiesItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               deviceID: SLuint32,
                                               numInputs: SLint32,
                                               isNew: SLboolean)>;
pub type slAvailableAudioOutputsChangedCallback =
    ::std::option::Option<unsafe extern "C" fn(caller:
                                                   SLAudioIODeviceCapabilitiesItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               deviceID: SLuint32,
                                               numOutputs: SLint32,
                                               isNew: SLboolean)>;
pub type slDefaultDeviceIDMapChangedCallback =
    ::std::option::Option<unsafe extern "C" fn(caller:
                                                   SLAudioIODeviceCapabilitiesItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               isOutput: SLboolean,
                                               numDevices: SLint32)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLLEDDescriptor_ {
    pub ledCount: SLuint8,
    pub primaryLED: SLuint8,
    pub colorMask: SLuint32,
}
#[test]
fn bindgen_test_layout_SLLEDDescriptor_() {
    assert_eq!(::std::mem::size_of::<SLLEDDescriptor_>() , 8usize , concat ! (
               "Size of: " , stringify ! ( SLLEDDescriptor_ ) ));
    assert_eq! (::std::mem::align_of::<SLLEDDescriptor_>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( SLLEDDescriptor_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDDescriptor_ ) ) . ledCount as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDDescriptor_ ) ,
                "::" , stringify ! ( ledCount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDDescriptor_ ) ) . primaryLED as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDDescriptor_ ) ,
                "::" , stringify ! ( primaryLED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDDescriptor_ ) ) . colorMask as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDDescriptor_ ) ,
                "::" , stringify ! ( colorMask ) ));
}
impl Clone for SLLEDDescriptor_ {
    fn clone(&self) -> Self { *self }
}
pub type SLLEDDescriptor = SLLEDDescriptor_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLHSL_ {
    pub hue: SLmillidegree,
    pub saturation: SLpermille,
    pub lightness: SLpermille,
}
#[test]
fn bindgen_test_layout_SLHSL_() {
    assert_eq!(::std::mem::size_of::<SLHSL_>() , 8usize , concat ! (
               "Size of: " , stringify ! ( SLHSL_ ) ));
    assert_eq! (::std::mem::align_of::<SLHSL_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( SLHSL_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLHSL_ ) ) . hue as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLHSL_ ) , "::" ,
                stringify ! ( hue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLHSL_ ) ) . saturation as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLHSL_ ) , "::" ,
                stringify ! ( saturation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLHSL_ ) ) . lightness as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( SLHSL_ ) , "::" ,
                stringify ! ( lightness ) ));
}
impl Clone for SLHSL_ {
    fn clone(&self) -> Self { *self }
}
pub type SLHSL = SLHSL_;
extern "C" {
    pub static SL_IID_LED: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLLEDArrayItf_ {
    pub ActivateLEDArray: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLLEDArrayItf,
                                                                     lightMask:
                                                                         SLuint32)
                                                    -> SLresult>,
    pub IsLEDArrayActivated: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLLEDArrayItf,
                                                                        lightMask:
                                                                            *mut SLuint32)
                                                       -> SLresult>,
    pub SetColor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLLEDArrayItf,
                                                             index: SLuint8,
                                                             color:
                                                                 *const SLHSL)
                                            -> SLresult>,
    pub GetColor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLLEDArrayItf,
                                                             index: SLuint8,
                                                             color:
                                                                 *mut SLHSL)
                                            -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLLEDArrayItf_() {
    assert_eq!(::std::mem::size_of::<SLLEDArrayItf_>() , 32usize , concat ! (
               "Size of: " , stringify ! ( SLLEDArrayItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLLEDArrayItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLLEDArrayItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDArrayItf_ ) ) . ActivateLEDArray as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDArrayItf_ ) , "::"
                , stringify ! ( ActivateLEDArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDArrayItf_ ) ) . IsLEDArrayActivated
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDArrayItf_ ) , "::"
                , stringify ! ( IsLEDArrayActivated ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDArrayItf_ ) ) . SetColor as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDArrayItf_ ) , "::"
                , stringify ! ( SetColor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLLEDArrayItf_ ) ) . GetColor as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLLEDArrayItf_ ) , "::"
                , stringify ! ( GetColor ) ));
}
impl Clone for SLLEDArrayItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLLEDArrayItf = *const *const SLLEDArrayItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLVibraDescriptor_ {
    pub supportsFrequency: SLboolean,
    pub supportsIntensity: SLboolean,
    pub minFrequency: SLmilliHertz,
    pub maxFrequency: SLmilliHertz,
}
#[test]
fn bindgen_test_layout_SLVibraDescriptor_() {
    assert_eq!(::std::mem::size_of::<SLVibraDescriptor_>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( SLVibraDescriptor_ ) ));
    assert_eq! (::std::mem::align_of::<SLVibraDescriptor_>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( SLVibraDescriptor_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraDescriptor_ ) ) .
                supportsFrequency as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! ( SLVibraDescriptor_ ) ,
                "::" , stringify ! ( supportsFrequency ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraDescriptor_ ) ) .
                supportsIntensity as * const _ as usize } , 4usize , concat !
                (
                "Alignment of field: " , stringify ! ( SLVibraDescriptor_ ) ,
                "::" , stringify ! ( supportsIntensity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraDescriptor_ ) ) . minFrequency as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraDescriptor_ ) ,
                "::" , stringify ! ( minFrequency ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraDescriptor_ ) ) . maxFrequency as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraDescriptor_ ) ,
                "::" , stringify ! ( maxFrequency ) ));
}
impl Clone for SLVibraDescriptor_ {
    fn clone(&self) -> Self { *self }
}
pub type SLVibraDescriptor = SLVibraDescriptor_;
extern "C" {
    pub static SL_IID_VIBRA: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLVibraItf_ {
    pub Vibrate: ::std::option::Option<unsafe extern "C" fn(self_: SLVibraItf,
                                                            vibrate:
                                                                SLboolean)
                                           -> SLresult>,
    pub IsVibrating: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLVibraItf,
                                                                pVibrating:
                                                                    *mut SLboolean)
                                               -> SLresult>,
    pub SetFrequency: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLVibraItf,
                                                                 frequency:
                                                                     SLmilliHertz)
                                                -> SLresult>,
    pub GetFrequency: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLVibraItf,
                                                                 pFrequency:
                                                                     *mut SLmilliHertz)
                                                -> SLresult>,
    pub SetIntensity: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLVibraItf,
                                                                 intensity:
                                                                     SLpermille)
                                                -> SLresult>,
    pub GetIntensity: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLVibraItf,
                                                                 pIntensity:
                                                                     *mut SLpermille)
                                                -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLVibraItf_() {
    assert_eq!(::std::mem::size_of::<SLVibraItf_>() , 48usize , concat ! (
               "Size of: " , stringify ! ( SLVibraItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLVibraItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLVibraItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraItf_ ) ) . Vibrate as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraItf_ ) , "::" ,
                stringify ! ( Vibrate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraItf_ ) ) . IsVibrating as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraItf_ ) , "::" ,
                stringify ! ( IsVibrating ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraItf_ ) ) . SetFrequency as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraItf_ ) , "::" ,
                stringify ! ( SetFrequency ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraItf_ ) ) . GetFrequency as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraItf_ ) , "::" ,
                stringify ! ( GetFrequency ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraItf_ ) ) . SetIntensity as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraItf_ ) , "::" ,
                stringify ! ( SetIntensity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVibraItf_ ) ) . GetIntensity as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVibraItf_ ) , "::" ,
                stringify ! ( GetIntensity ) ));
}
impl Clone for SLVibraItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLVibraItf = *const *const SLVibraItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMetadataInfo_ {
    pub size: SLuint32,
    pub encoding: SLuint32,
    pub langCountry: [SLchar; 16usize],
    pub data: [SLuint8; 1usize],
}
#[test]
fn bindgen_test_layout_SLMetadataInfo_() {
    assert_eq!(::std::mem::size_of::<SLMetadataInfo_>() , 28usize , concat ! (
               "Size of: " , stringify ! ( SLMetadataInfo_ ) ));
    assert_eq! (::std::mem::align_of::<SLMetadataInfo_>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( SLMetadataInfo_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataInfo_ ) ) . size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataInfo_ ) ,
                "::" , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataInfo_ ) ) . encoding as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataInfo_ ) ,
                "::" , stringify ! ( encoding ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataInfo_ ) ) . langCountry as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataInfo_ ) ,
                "::" , stringify ! ( langCountry ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataInfo_ ) ) . data as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataInfo_ ) ,
                "::" , stringify ! ( data ) ));
}
impl Clone for SLMetadataInfo_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMetadataInfo = SLMetadataInfo_;
extern "C" {
    pub static SL_IID_METADATAEXTRACTION: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMetadataExtractionItf_ {
    pub GetItemCount: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMetadataExtractionItf,
                                                                 pItemCount:
                                                                     *mut SLuint32)
                                                -> SLresult>,
    pub GetKeySize: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLMetadataExtractionItf,
                                                               index:
                                                                   SLuint32,
                                                               pKeySize:
                                                                   *mut SLuint32)
                                              -> SLresult>,
    pub GetKey: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               SLMetadataExtractionItf,
                                                           index: SLuint32,
                                                           keySize: SLuint32,
                                                           pKey:
                                                               *mut SLMetadataInfo)
                                          -> SLresult>,
    pub GetValueSize: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMetadataExtractionItf,
                                                                 index:
                                                                     SLuint32,
                                                                 pValueSize:
                                                                     *mut SLuint32)
                                                -> SLresult>,
    pub GetValue: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLMetadataExtractionItf,
                                                             index: SLuint32,
                                                             valueSize:
                                                                 SLuint32,
                                                             pValue:
                                                                 *mut SLMetadataInfo)
                                            -> SLresult>,
    pub AddKeyFilter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMetadataExtractionItf,
                                                                 keySize:
                                                                     SLuint32,
                                                                 pKey:
                                                                     *const ::std::os::raw::c_void,
                                                                 keyEncoding:
                                                                     SLuint32,
                                                                 pValueLangCountry:
                                                                     *const SLchar,
                                                                 valueEncoding:
                                                                     SLuint32,
                                                                 filterMask:
                                                                     SLuint8)
                                                -> SLresult>,
    pub ClearKeyFilter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMetadataExtractionItf)
                                                  -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLMetadataExtractionItf_() {
    assert_eq!(::std::mem::size_of::<SLMetadataExtractionItf_>() , 56usize ,
               concat ! (
               "Size of: " , stringify ! ( SLMetadataExtractionItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMetadataExtractionItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLMetadataExtractionItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) .
                GetItemCount as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! ( GetItemCount
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) . GetKeySize
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! ( GetKeySize )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) . GetKey as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! ( GetKey ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) .
                GetValueSize as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! ( GetValueSize
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) . GetValue
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! ( GetValue )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) .
                AddKeyFilter as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! ( AddKeyFilter
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataExtractionItf_ ) ) .
                ClearKeyFilter as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLMetadataExtractionItf_ ) , "::" , stringify ! (
                ClearKeyFilter ) ));
}
impl Clone for SLMetadataExtractionItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMetadataExtractionItf = *const *const SLMetadataExtractionItf_;
extern "C" {
    pub static SL_IID_METADATATRAVERSAL: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMetadataTraversalItf_ {
    pub SetMode: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLMetadataTraversalItf,
                                                            mode: SLuint32)
                                           -> SLresult>,
    pub GetChildCount: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLMetadataTraversalItf,
                                                                  pCount:
                                                                      *mut SLuint32)
                                                 -> SLresult>,
    pub GetChildMIMETypeSize: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLMetadataTraversalItf,
                                                                         index:
                                                                             SLuint32,
                                                                         pSize:
                                                                             *mut SLuint32)
                                                        -> SLresult>,
    pub GetChildInfo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMetadataTraversalItf,
                                                                 index:
                                                                     SLuint32,
                                                                 pNodeID:
                                                                     *mut SLint32,
                                                                 pType:
                                                                     *mut SLuint32,
                                                                 size:
                                                                     SLuint32,
                                                                 pMimeType:
                                                                     *mut SLchar)
                                                -> SLresult>,
    pub SetActiveNode: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLMetadataTraversalItf,
                                                                  index:
                                                                      SLuint32)
                                                 -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLMetadataTraversalItf_() {
    assert_eq!(::std::mem::size_of::<SLMetadataTraversalItf_>() , 40usize ,
               concat ! (
               "Size of: " , stringify ! ( SLMetadataTraversalItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMetadataTraversalItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLMetadataTraversalItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataTraversalItf_ ) ) . SetMode as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataTraversalItf_
                ) , "::" , stringify ! ( SetMode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataTraversalItf_ ) ) .
                GetChildCount as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataTraversalItf_
                ) , "::" , stringify ! ( GetChildCount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataTraversalItf_ ) ) .
                GetChildMIMETypeSize as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataTraversalItf_
                ) , "::" , stringify ! ( GetChildMIMETypeSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataTraversalItf_ ) ) .
                GetChildInfo as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataTraversalItf_
                ) , "::" , stringify ! ( GetChildInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMetadataTraversalItf_ ) ) .
                SetActiveNode as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMetadataTraversalItf_
                ) , "::" , stringify ! ( SetActiveNode ) ));
}
impl Clone for SLMetadataTraversalItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMetadataTraversalItf = *const *const SLMetadataTraversalItf_;
extern "C" {
    pub static SL_IID_DYNAMICSOURCE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDynamicSourceItf_ {
    pub SetSource: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLDynamicSourceItf,
                                                              pDataSource:
                                                                  *mut SLDataSource)
                                             -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLDynamicSourceItf_() {
    assert_eq!(::std::mem::size_of::<SLDynamicSourceItf_>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( SLDynamicSourceItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLDynamicSourceItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLDynamicSourceItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDynamicSourceItf_ ) ) . SetSource as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDynamicSourceItf_ ) ,
                "::" , stringify ! ( SetSource ) ));
}
impl Clone for SLDynamicSourceItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDynamicSourceItf = *const *const SLDynamicSourceItf_;
extern "C" {
    pub static SL_IID_OUTPUTMIX: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLOutputMixItf_ {
    pub GetDestinationOutputDeviceIDs: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      SLOutputMixItf,
                                                                                  pNumDevices:
                                                                                      *mut SLint32,
                                                                                  pDeviceIDs:
                                                                                      *mut SLuint32)
                                                                 -> SLresult>,
    pub RegisterDeviceChangeCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     SLOutputMixItf,
                                                                                 callback:
                                                                                     slMixDeviceChangeCallback,
                                                                                 pContext:
                                                                                     *mut ::std::os::raw::c_void)
                                                                -> SLresult>,
    pub ReRoute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLOutputMixItf,
                                                            numOutputDevices:
                                                                SLint32,
                                                            pOutputDeviceIDs:
                                                                *mut SLuint32)
                                           -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLOutputMixItf_() {
    assert_eq!(::std::mem::size_of::<SLOutputMixItf_>() , 24usize , concat ! (
               "Size of: " , stringify ! ( SLOutputMixItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLOutputMixItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLOutputMixItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLOutputMixItf_ ) ) .
                GetDestinationOutputDeviceIDs as * const _ as usize } , 0usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLOutputMixItf_ ) ,
                "::" , stringify ! ( GetDestinationOutputDeviceIDs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLOutputMixItf_ ) ) .
                RegisterDeviceChangeCallback as * const _ as usize } , 8usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLOutputMixItf_ ) ,
                "::" , stringify ! ( RegisterDeviceChangeCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLOutputMixItf_ ) ) . ReRoute as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLOutputMixItf_ ) ,
                "::" , stringify ! ( ReRoute ) ));
}
impl Clone for SLOutputMixItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLOutputMixItf = *const *const SLOutputMixItf_;
pub type slMixDeviceChangeCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLOutputMixItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub static SL_IID_PLAY: SLInterfaceID;
}
/** Playback interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLPlayItf_ {
    pub SetPlayState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLPlayItf,
                                                                 state:
                                                                     SLuint32)
                                                -> SLresult>,
    pub GetPlayState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLPlayItf,
                                                                 pState:
                                                                     *mut SLuint32)
                                                -> SLresult>,
    pub GetDuration: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLPlayItf,
                                                                pMsec:
                                                                    *mut SLmillisecond)
                                               -> SLresult>,
    pub GetPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLPlayItf,
                                                                pMsec:
                                                                    *mut SLmillisecond)
                                               -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLPlayItf,
                                                                     callback:
                                                                         slPlayCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
    pub SetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLPlayItf,
                                                                          eventFlags:
                                                                              SLuint32)
                                                         -> SLresult>,
    pub GetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLPlayItf,
                                                                          pEventFlags:
                                                                              *mut SLuint32)
                                                         -> SLresult>,
    pub SetMarkerPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLPlayItf,
                                                                      mSec:
                                                                          SLmillisecond)
                                                     -> SLresult>,
    pub ClearMarkerPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLPlayItf)
                                                       -> SLresult>,
    pub GetMarkerPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLPlayItf,
                                                                      pMsec:
                                                                          *mut SLmillisecond)
                                                     -> SLresult>,
    pub SetPositionUpdatePeriod: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLPlayItf,
                                                                            mSec:
                                                                                SLmillisecond)
                                                           -> SLresult>,
    pub GetPositionUpdatePeriod: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLPlayItf,
                                                                            pMsec:
                                                                                *mut SLmillisecond)
                                                           -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLPlayItf_() {
    assert_eq!(::std::mem::size_of::<SLPlayItf_>() , 96usize , concat ! (
               "Size of: " , stringify ! ( SLPlayItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLPlayItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLPlayItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . SetPlayState as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( SetPlayState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . GetPlayState as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( GetPlayState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . GetDuration as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( GetDuration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . GetPosition as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( GetPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . RegisterCallback as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( RegisterCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . SetCallbackEventsMask as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( SetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . GetCallbackEventsMask as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( GetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . SetMarkerPosition as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( SetMarkerPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . ClearMarkerPosition as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( ClearMarkerPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . GetMarkerPosition as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( GetMarkerPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . SetPositionUpdatePeriod
                as * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( SetPositionUpdatePeriod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlayItf_ ) ) . GetPositionUpdatePeriod
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlayItf_ ) , "::" ,
                stringify ! ( GetPositionUpdatePeriod ) ));
}
impl Clone for SLPlayItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLPlayItf = *const *const SLPlayItf_;
pub type slPlayCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLPlayItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               event: SLuint32)>;
extern "C" {
    pub static SL_IID_PREFETCHSTATUS: SLInterfaceID;
}
/** Prefetch status interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLPrefetchStatusItf_ {
    pub GetPrefetchStatus: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLPrefetchStatusItf,
                                                                      pStatus:
                                                                          *mut SLuint32)
                                                     -> SLresult>,
    pub GetFillLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLPrefetchStatusItf,
                                                                 pLevel:
                                                                     *mut SLpermille)
                                                -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLPrefetchStatusItf,
                                                                     callback:
                                                                         slPrefetchCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
    pub SetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLPrefetchStatusItf,
                                                                          eventFlags:
                                                                              SLuint32)
                                                         -> SLresult>,
    pub GetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLPrefetchStatusItf,
                                                                          pEventFlags:
                                                                              *mut SLuint32)
                                                         -> SLresult>,
    pub SetFillUpdatePeriod: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLPrefetchStatusItf,
                                                                        period:
                                                                            SLpermille)
                                                       -> SLresult>,
    pub GetFillUpdatePeriod: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLPrefetchStatusItf,
                                                                        pPeriod:
                                                                            *mut SLpermille)
                                                       -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLPrefetchStatusItf_() {
    assert_eq!(::std::mem::size_of::<SLPrefetchStatusItf_>() , 56usize ,
               concat ! ( "Size of: " , stringify ! ( SLPrefetchStatusItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLPrefetchStatusItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLPrefetchStatusItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) .
                GetPrefetchStatus as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( GetPrefetchStatus ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) . GetFillLevel
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( GetFillLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) .
                RegisterCallback as * const _ as usize } , 16usize , concat !
                (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( RegisterCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) .
                SetCallbackEventsMask as * const _ as usize } , 24usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( SetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) .
                GetCallbackEventsMask as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( GetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) .
                SetFillUpdatePeriod as * const _ as usize } , 40usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( SetFillUpdatePeriod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPrefetchStatusItf_ ) ) .
                GetFillUpdatePeriod as * const _ as usize } , 48usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLPrefetchStatusItf_ )
                , "::" , stringify ! ( GetFillUpdatePeriod ) ));
}
impl Clone for SLPrefetchStatusItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLPrefetchStatusItf = *const *const SLPrefetchStatusItf_;
pub type slPrefetchCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLPrefetchStatusItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               event: SLuint32)>;
extern "C" {
    pub static SL_IID_PLAYBACKRATE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLPlaybackRateItf_ {
    pub SetRate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLPlaybackRateItf,
                                                            rate: SLpermille)
                                           -> SLresult>,
    pub GetRate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLPlaybackRateItf,
                                                            pRate:
                                                                *mut SLpermille)
                                           -> SLresult>,
    pub SetPropertyConstraints: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               SLPlaybackRateItf,
                                                                           constraints:
                                                                               SLuint32)
                                                          -> SLresult>,
    pub GetProperties: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLPlaybackRateItf,
                                                                  pProperties:
                                                                      *mut SLuint32)
                                                 -> SLresult>,
    pub GetCapabilitiesOfRate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLPlaybackRateItf,
                                                                          rate:
                                                                              SLpermille,
                                                                          pCapabilities:
                                                                              *mut SLuint32)
                                                         -> SLresult>,
    pub GetRateRange: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLPlaybackRateItf,
                                                                 index:
                                                                     SLuint8,
                                                                 pMinRate:
                                                                     *mut SLpermille,
                                                                 pMaxRate:
                                                                     *mut SLpermille,
                                                                 pStepSize:
                                                                     *mut SLpermille,
                                                                 pCapabilities:
                                                                     *mut SLuint32)
                                                -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLPlaybackRateItf_() {
    assert_eq!(::std::mem::size_of::<SLPlaybackRateItf_>() , 48usize , concat
               ! ( "Size of: " , stringify ! ( SLPlaybackRateItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLPlaybackRateItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLPlaybackRateItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlaybackRateItf_ ) ) . SetRate as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlaybackRateItf_ ) ,
                "::" , stringify ! ( SetRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlaybackRateItf_ ) ) . GetRate as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlaybackRateItf_ ) ,
                "::" , stringify ! ( GetRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlaybackRateItf_ ) ) .
                SetPropertyConstraints as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLPlaybackRateItf_ ) ,
                "::" , stringify ! ( SetPropertyConstraints ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlaybackRateItf_ ) ) . GetProperties as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlaybackRateItf_ ) ,
                "::" , stringify ! ( GetProperties ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlaybackRateItf_ ) ) .
                GetCapabilitiesOfRate as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLPlaybackRateItf_ ) ,
                "::" , stringify ! ( GetCapabilitiesOfRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPlaybackRateItf_ ) ) . GetRateRange as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPlaybackRateItf_ ) ,
                "::" , stringify ! ( GetRateRange ) ));
}
impl Clone for SLPlaybackRateItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLPlaybackRateItf = *const *const SLPlaybackRateItf_;
extern "C" {
    pub static SL_IID_SEEK: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLSeekItf_ {
    pub SetPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLSeekItf,
                                                                pos:
                                                                    SLmillisecond,
                                                                seekMode:
                                                                    SLuint32)
                                               -> SLresult>,
    pub SetLoop: ::std::option::Option<unsafe extern "C" fn(self_: SLSeekItf,
                                                            loopEnable:
                                                                SLboolean,
                                                            startPos:
                                                                SLmillisecond,
                                                            endPos:
                                                                SLmillisecond)
                                           -> SLresult>,
    pub GetLoop: ::std::option::Option<unsafe extern "C" fn(self_: SLSeekItf,
                                                            pLoopEnabled:
                                                                *mut SLboolean,
                                                            pStartPos:
                                                                *mut SLmillisecond,
                                                            pEndPos:
                                                                *mut SLmillisecond)
                                           -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLSeekItf_() {
    assert_eq!(::std::mem::size_of::<SLSeekItf_>() , 24usize , concat ! (
               "Size of: " , stringify ! ( SLSeekItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLSeekItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLSeekItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLSeekItf_ ) ) . SetPosition as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLSeekItf_ ) , "::" ,
                stringify ! ( SetPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLSeekItf_ ) ) . SetLoop as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLSeekItf_ ) , "::" ,
                stringify ! ( SetLoop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLSeekItf_ ) ) . GetLoop as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLSeekItf_ ) , "::" ,
                stringify ! ( GetLoop ) ));
}
impl Clone for SLSeekItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLSeekItf = *const *const SLSeekItf_;
extern "C" {
    pub static SL_IID_RECORD: SLInterfaceID;
}
/** Recording interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLRecordItf_ {
    pub SetRecordState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLRecordItf,
                                                                   state:
                                                                       SLuint32)
                                                  -> SLresult>,
    pub GetRecordState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLRecordItf,
                                                                   pState:
                                                                       *mut SLuint32)
                                                  -> SLresult>,
    pub SetDurationLimit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLRecordItf,
                                                                     msec:
                                                                         SLmillisecond)
                                                    -> SLresult>,
    pub GetPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLRecordItf,
                                                                pMsec:
                                                                    *mut SLmillisecond)
                                               -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLRecordItf,
                                                                     callback:
                                                                         slRecordCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
    pub SetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLRecordItf,
                                                                          eventFlags:
                                                                              SLuint32)
                                                         -> SLresult>,
    pub GetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLRecordItf,
                                                                          pEventFlags:
                                                                              *mut SLuint32)
                                                         -> SLresult>,
    pub SetMarkerPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLRecordItf,
                                                                      mSec:
                                                                          SLmillisecond)
                                                     -> SLresult>,
    pub ClearMarkerPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLRecordItf)
                                                       -> SLresult>,
    pub GetMarkerPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLRecordItf,
                                                                      pMsec:
                                                                          *mut SLmillisecond)
                                                     -> SLresult>,
    pub SetPositionUpdatePeriod: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLRecordItf,
                                                                            mSec:
                                                                                SLmillisecond)
                                                           -> SLresult>,
    pub GetPositionUpdatePeriod: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLRecordItf,
                                                                            pMsec:
                                                                                *mut SLmillisecond)
                                                           -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLRecordItf_() {
    assert_eq!(::std::mem::size_of::<SLRecordItf_>() , 96usize , concat ! (
               "Size of: " , stringify ! ( SLRecordItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLRecordItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLRecordItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . SetRecordState as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( SetRecordState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . GetRecordState as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( GetRecordState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . SetDurationLimit as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( SetDurationLimit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . GetPosition as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( GetPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . RegisterCallback as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( RegisterCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . SetCallbackEventsMask
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( SetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . GetCallbackEventsMask
                as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( GetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . SetMarkerPosition as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( SetMarkerPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . ClearMarkerPosition as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( ClearMarkerPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) . GetMarkerPosition as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( GetMarkerPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) .
                SetPositionUpdatePeriod as * const _ as usize } , 80usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( SetPositionUpdatePeriod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRecordItf_ ) ) .
                GetPositionUpdatePeriod as * const _ as usize } , 88usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLRecordItf_ ) , "::" ,
                stringify ! ( GetPositionUpdatePeriod ) ));
}
impl Clone for SLRecordItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLRecordItf = *const *const SLRecordItf_;
pub type slRecordCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLRecordItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               event: SLuint32)>;
extern "C" {
    pub static SL_IID_EQUALIZER: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEqualizerItf_ {
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLEqualizerItf,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLEqualizerItf,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
    pub GetNumberOfBands: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLEqualizerItf,
                                                                     pAmount:
                                                                         *mut SLuint16)
                                                    -> SLresult>,
    pub GetBandLevelRange: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLEqualizerItf,
                                                                      pMin:
                                                                          *mut SLmillibel,
                                                                      pMax:
                                                                          *mut SLmillibel)
                                                     -> SLresult>,
    pub SetBandLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEqualizerItf,
                                                                 band:
                                                                     SLuint16,
                                                                 level:
                                                                     SLmillibel)
                                                -> SLresult>,
    pub GetBandLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEqualizerItf,
                                                                 band:
                                                                     SLuint16,
                                                                 pLevel:
                                                                     *mut SLmillibel)
                                                -> SLresult>,
    pub GetCenterFreq: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLEqualizerItf,
                                                                  band:
                                                                      SLuint16,
                                                                  pCenter:
                                                                      *mut SLmilliHertz)
                                                 -> SLresult>,
    pub GetBandFreqRange: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLEqualizerItf,
                                                                     band:
                                                                         SLuint16,
                                                                     pMin:
                                                                         *mut SLmilliHertz,
                                                                     pMax:
                                                                         *mut SLmilliHertz)
                                                    -> SLresult>,
    pub GetBand: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLEqualizerItf,
                                                            frequency:
                                                                SLmilliHertz,
                                                            pBand:
                                                                *mut SLuint16)
                                           -> SLresult>,
    pub GetCurrentPreset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLEqualizerItf,
                                                                     pPreset:
                                                                         *mut SLuint16)
                                                    -> SLresult>,
    pub UsePreset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLEqualizerItf,
                                                              index: SLuint16)
                                             -> SLresult>,
    pub GetNumberOfPresets: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           SLEqualizerItf,
                                                                       pNumPresets:
                                                                           *mut SLuint16)
                                                      -> SLresult>,
    pub GetPresetName: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLEqualizerItf,
                                                                  index:
                                                                      SLuint16,
                                                                  ppName:
                                                                      *mut *const SLchar)
                                                 -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLEqualizerItf_() {
    assert_eq!(::std::mem::size_of::<SLEqualizerItf_>() , 104usize , concat !
               ( "Size of: " , stringify ! ( SLEqualizerItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLEqualizerItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLEqualizerItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . SetEnabled as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . IsEnabled as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( IsEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetNumberOfBands as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetNumberOfBands ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetBandLevelRange
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetBandLevelRange ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . SetBandLevel as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( SetBandLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetBandLevel as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetBandLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetCenterFreq as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetCenterFreq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetBandFreqRange as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetBandFreqRange ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetBand as * const
                _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetBand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetCurrentPreset as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetCurrentPreset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . UsePreset as *
                const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( UsePreset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetNumberOfPresets
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetNumberOfPresets ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEqualizerItf_ ) ) . GetPresetName as *
                const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEqualizerItf_ ) ,
                "::" , stringify ! ( GetPresetName ) ));
}
impl Clone for SLEqualizerItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEqualizerItf = *const *const SLEqualizerItf_;
extern "C" {
    pub static SL_IID_VOLUME: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLVolumeItf_ {
    pub SetVolumeLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLVolumeItf,
                                                                   level:
                                                                       SLmillibel)
                                                  -> SLresult>,
    pub GetVolumeLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLVolumeItf,
                                                                   pLevel:
                                                                       *mut SLmillibel)
                                                  -> SLresult>,
    pub GetMaxVolumeLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLVolumeItf,
                                                                      pMaxLevel:
                                                                          *mut SLmillibel)
                                                     -> SLresult>,
    pub SetMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLVolumeItf,
                                                            mute: SLboolean)
                                           -> SLresult>,
    pub GetMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLVolumeItf,
                                                            pMute:
                                                                *mut SLboolean)
                                           -> SLresult>,
    pub EnableStereoPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLVolumeItf,
                                                                         enable:
                                                                             SLboolean)
                                                        -> SLresult>,
    pub IsEnabledStereoPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLVolumeItf,
                                                                            pEnable:
                                                                                *mut SLboolean)
                                                           -> SLresult>,
    pub SetStereoPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLVolumeItf,
                                                                      stereoPosition:
                                                                          SLpermille)
                                                     -> SLresult>,
    pub GetStereoPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLVolumeItf,
                                                                      pStereoPosition:
                                                                          *mut SLpermille)
                                                     -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLVolumeItf_() {
    assert_eq!(::std::mem::size_of::<SLVolumeItf_>() , 72usize , concat ! (
               "Size of: " , stringify ! ( SLVolumeItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLVolumeItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLVolumeItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . SetVolumeLevel as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( SetVolumeLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . GetVolumeLevel as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( GetVolumeLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . GetMaxVolumeLevel as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( GetMaxVolumeLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . SetMute as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( SetMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . GetMute as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( GetMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . EnableStereoPosition
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( EnableStereoPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) .
                IsEnabledStereoPosition as * const _ as usize } , 48usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( IsEnabledStereoPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . SetStereoPosition as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( SetStereoPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVolumeItf_ ) ) . GetStereoPosition as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVolumeItf_ ) , "::" ,
                stringify ! ( GetStereoPosition ) ));
}
impl Clone for SLVolumeItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLVolumeItf = *const *const SLVolumeItf_;
extern "C" {
    pub static SL_IID_DEVICEVOLUME: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDeviceVolumeItf_ {
    pub GetVolumeScale: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLDeviceVolumeItf,
                                                                   deviceID:
                                                                       SLuint32,
                                                                   pMinValue:
                                                                       *mut SLint32,
                                                                   pMaxValue:
                                                                       *mut SLint32,
                                                                   pIsMillibelScale:
                                                                       *mut SLboolean)
                                                  -> SLresult>,
    pub SetVolume: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLDeviceVolumeItf,
                                                              deviceID:
                                                                  SLuint32,
                                                              volume: SLint32)
                                             -> SLresult>,
    pub GetVolume: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLDeviceVolumeItf,
                                                              deviceID:
                                                                  SLuint32,
                                                              pVolume:
                                                                  *mut SLint32)
                                             -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLDeviceVolumeItf_() {
    assert_eq!(::std::mem::size_of::<SLDeviceVolumeItf_>() , 24usize , concat
               ! ( "Size of: " , stringify ! ( SLDeviceVolumeItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLDeviceVolumeItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLDeviceVolumeItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDeviceVolumeItf_ ) ) . GetVolumeScale
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDeviceVolumeItf_ ) ,
                "::" , stringify ! ( GetVolumeScale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDeviceVolumeItf_ ) ) . SetVolume as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDeviceVolumeItf_ ) ,
                "::" , stringify ! ( SetVolume ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDeviceVolumeItf_ ) ) . GetVolume as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLDeviceVolumeItf_ ) ,
                "::" , stringify ! ( GetVolume ) ));
}
impl Clone for SLDeviceVolumeItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDeviceVolumeItf = *const *const SLDeviceVolumeItf_;
extern "C" {
    pub static SL_IID_BUFFERQUEUE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLBufferQueueItf_ {
    pub Enqueue: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLBufferQueueItf,
                                                            pBuffer:
                                                                *const ::std::os::raw::c_void,
                                                            size: SLuint32)
                                           -> SLresult>,
    pub Clear: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              SLBufferQueueItf)
                                         -> SLresult>,
    pub GetState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLBufferQueueItf,
                                                             pState:
                                                                 *mut SLBufferQueueState)
                                            -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLBufferQueueItf,
                                                                     callback:
                                                                         slBufferQueueCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLBufferQueueItf_() {
    assert_eq!(::std::mem::size_of::<SLBufferQueueItf_>() , 32usize , concat !
               ( "Size of: " , stringify ! ( SLBufferQueueItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLBufferQueueItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLBufferQueueItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBufferQueueItf_ ) ) . Enqueue as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBufferQueueItf_ ) ,
                "::" , stringify ! ( Enqueue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBufferQueueItf_ ) ) . Clear as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBufferQueueItf_ ) ,
                "::" , stringify ! ( Clear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBufferQueueItf_ ) ) . GetState as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBufferQueueItf_ ) ,
                "::" , stringify ! ( GetState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBufferQueueItf_ ) ) . RegisterCallback
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBufferQueueItf_ ) ,
                "::" , stringify ! ( RegisterCallback ) ));
}
impl Clone for SLBufferQueueItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLBufferQueueItf = *const *const SLBufferQueueItf_;
pub type slBufferQueueCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLBufferQueueItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void)>;
/** Buffer queue state **/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLBufferQueueState_ {
    pub count: SLuint32,
    pub playIndex: SLuint32,
}
#[test]
fn bindgen_test_layout_SLBufferQueueState_() {
    assert_eq!(::std::mem::size_of::<SLBufferQueueState_>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( SLBufferQueueState_ ) ));
    assert_eq! (::std::mem::align_of::<SLBufferQueueState_>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLBufferQueueState_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBufferQueueState_ ) ) . count as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBufferQueueState_ ) ,
                "::" , stringify ! ( count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBufferQueueState_ ) ) . playIndex as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBufferQueueState_ ) ,
                "::" , stringify ! ( playIndex ) ));
}
impl Clone for SLBufferQueueState_ {
    fn clone(&self) -> Self { *self }
}
pub type SLBufferQueueState = SLBufferQueueState_;
extern "C" {
    pub static SL_IID_PRESETREVERB: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLPresetReverbItf_ {
    pub SetPreset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLPresetReverbItf,
                                                              preset:
                                                                  SLuint16)
                                             -> SLresult>,
    pub GetPreset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLPresetReverbItf,
                                                              pPreset:
                                                                  *mut SLuint16)
                                             -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLPresetReverbItf_() {
    assert_eq!(::std::mem::size_of::<SLPresetReverbItf_>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( SLPresetReverbItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLPresetReverbItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLPresetReverbItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPresetReverbItf_ ) ) . SetPreset as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPresetReverbItf_ ) ,
                "::" , stringify ! ( SetPreset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPresetReverbItf_ ) ) . GetPreset as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPresetReverbItf_ ) ,
                "::" , stringify ! ( GetPreset ) ));
}
impl Clone for SLPresetReverbItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLPresetReverbItf = *const *const SLPresetReverbItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEnvironmentalReverbSettings_ {
    pub roomLevel: SLmillibel,
    pub roomHFLevel: SLmillibel,
    pub decayTime: SLmillisecond,
    pub decayHFRatio: SLpermille,
    pub reflectionsLevel: SLmillibel,
    pub reflectionsDelay: SLmillisecond,
    pub reverbLevel: SLmillibel,
    pub reverbDelay: SLmillisecond,
    pub diffusion: SLpermille,
    pub density: SLpermille,
}
#[test]
fn bindgen_test_layout_SLEnvironmentalReverbSettings_() {
    assert_eq!(::std::mem::size_of::<SLEnvironmentalReverbSettings_>() ,
               28usize , concat ! (
               "Size of: " , stringify ! ( SLEnvironmentalReverbSettings_ )
               ));
    assert_eq! (::std::mem::align_of::<SLEnvironmentalReverbSettings_>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( SLEnvironmentalReverbSettings_
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                roomLevel as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                roomLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                roomHFLevel as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                roomHFLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                decayTime as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                decayTime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                decayHFRatio as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                decayHFRatio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                reflectionsLevel as * const _ as usize } , 10usize , concat !
                (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                reflectionsLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                reflectionsDelay as * const _ as usize } , 12usize , concat !
                (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                reflectionsDelay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                reverbLevel as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                reverbLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                reverbDelay as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                reverbDelay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                diffusion as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                diffusion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbSettings_ ) ) .
                density as * const _ as usize } , 26usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbSettings_ ) , "::" , stringify ! (
                density ) ));
}
impl Clone for SLEnvironmentalReverbSettings_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEnvironmentalReverbSettings = SLEnvironmentalReverbSettings_;
extern "C" {
    pub static SL_IID_ENVIRONMENTALREVERB: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEnvironmentalReverbItf_ {
    pub SetRoomLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEnvironmentalReverbItf,
                                                                 room:
                                                                     SLmillibel)
                                                -> SLresult>,
    pub GetRoomLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEnvironmentalReverbItf,
                                                                 pRoom:
                                                                     *mut SLmillibel)
                                                -> SLresult>,
    pub SetRoomHFLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEnvironmentalReverbItf,
                                                                   roomHF:
                                                                       SLmillibel)
                                                  -> SLresult>,
    pub GetRoomHFLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEnvironmentalReverbItf,
                                                                   pRoomHF:
                                                                       *mut SLmillibel)
                                                  -> SLresult>,
    pub SetDecayTime: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEnvironmentalReverbItf,
                                                                 decayTime:
                                                                     SLmillisecond)
                                                -> SLresult>,
    pub GetDecayTime: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEnvironmentalReverbItf,
                                                                 pDecayTime:
                                                                     *mut SLmillisecond)
                                                -> SLresult>,
    pub SetDecayHFRatio: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLEnvironmentalReverbItf,
                                                                    decayHFRatio:
                                                                        SLpermille)
                                                   -> SLresult>,
    pub GetDecayHFRatio: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLEnvironmentalReverbItf,
                                                                    pDecayHFRatio:
                                                                        *mut SLpermille)
                                                   -> SLresult>,
    pub SetReflectionsLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLEnvironmentalReverbItf,
                                                                        reflectionsLevel:
                                                                            SLmillibel)
                                                       -> SLresult>,
    pub GetReflectionsLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLEnvironmentalReverbItf,
                                                                        pReflectionsLevel:
                                                                            *mut SLmillibel)
                                                       -> SLresult>,
    pub SetReflectionsDelay: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLEnvironmentalReverbItf,
                                                                        reflectionsDelay:
                                                                            SLmillisecond)
                                                       -> SLresult>,
    pub GetReflectionsDelay: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLEnvironmentalReverbItf,
                                                                        pReflectionsDelay:
                                                                            *mut SLmillisecond)
                                                       -> SLresult>,
    pub SetReverbLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEnvironmentalReverbItf,
                                                                   reverbLevel:
                                                                       SLmillibel)
                                                  -> SLresult>,
    pub GetReverbLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEnvironmentalReverbItf,
                                                                   pReverbLevel:
                                                                       *mut SLmillibel)
                                                  -> SLresult>,
    pub SetReverbDelay: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEnvironmentalReverbItf,
                                                                   reverbDelay:
                                                                       SLmillisecond)
                                                  -> SLresult>,
    pub GetReverbDelay: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEnvironmentalReverbItf,
                                                                   pReverbDelay:
                                                                       *mut SLmillisecond)
                                                  -> SLresult>,
    pub SetDiffusion: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEnvironmentalReverbItf,
                                                                 diffusion:
                                                                     SLpermille)
                                                -> SLresult>,
    pub GetDiffusion: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEnvironmentalReverbItf,
                                                                 pDiffusion:
                                                                     *mut SLpermille)
                                                -> SLresult>,
    pub SetDensity: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLEnvironmentalReverbItf,
                                                               density:
                                                                   SLpermille)
                                              -> SLresult>,
    pub GetDensity: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLEnvironmentalReverbItf,
                                                               pDensity:
                                                                   *mut SLpermille)
                                              -> SLresult>,
    pub SetEnvironmentalReverbProperties: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                         SLEnvironmentalReverbItf,
                                                                                     pProperties:
                                                                                         *const SLEnvironmentalReverbSettings)
                                                                    ->
                                                                        SLresult>,
    pub GetEnvironmentalReverbProperties: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                         SLEnvironmentalReverbItf,
                                                                                     pProperties:
                                                                                         *mut SLEnvironmentalReverbSettings)
                                                                    ->
                                                                        SLresult>,
}
#[test]
fn bindgen_test_layout_SLEnvironmentalReverbItf_() {
    assert_eq!(::std::mem::size_of::<SLEnvironmentalReverbItf_>() , 176usize ,
               concat ! (
               "Size of: " , stringify ! ( SLEnvironmentalReverbItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLEnvironmentalReverbItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLEnvironmentalReverbItf_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetRoomLevel as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetRoomLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetRoomLevel as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetRoomLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetRoomHFLevel as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetRoomHFLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetRoomHFLevel as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetRoomHFLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetDecayTime as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetDecayTime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetDecayTime as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetDecayTime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetDecayHFRatio as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetDecayHFRatio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetDecayHFRatio as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetDecayHFRatio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetReflectionsLevel as * const _ as usize } , 64usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetReflectionsLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetReflectionsLevel as * const _ as usize } , 72usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetReflectionsLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetReflectionsDelay as * const _ as usize } , 80usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetReflectionsDelay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetReflectionsDelay as * const _ as usize } , 88usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetReflectionsDelay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetReverbLevel as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetReverbLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetReverbLevel as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetReverbLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetReverbDelay as * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetReverbDelay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetReverbDelay as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetReverbDelay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetDiffusion as * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetDiffusion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetDiffusion as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetDiffusion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetDensity as * const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! ( SetDensity
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetDensity as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! ( GetDensity
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                SetEnvironmentalReverbProperties as * const _ as usize } ,
                160usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                SetEnvironmentalReverbProperties ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEnvironmentalReverbItf_ ) ) .
                GetEnvironmentalReverbProperties as * const _ as usize } ,
                168usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEnvironmentalReverbItf_ ) , "::" , stringify ! (
                GetEnvironmentalReverbProperties ) ));
}
impl Clone for SLEnvironmentalReverbItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEnvironmentalReverbItf = *const *const SLEnvironmentalReverbItf_;
extern "C" {
    pub static SL_IID_EFFECTSEND: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEffectSendItf_ {
    pub EnableEffectSend: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLEffectSendItf,
                                                                     pAuxEffect:
                                                                         *const ::std::os::raw::c_void,
                                                                     enable:
                                                                         SLboolean,
                                                                     initialLevel:
                                                                         SLmillibel)
                                                    -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLEffectSendItf,
                                                              pAuxEffect:
                                                                  *const ::std::os::raw::c_void,
                                                              pEnable:
                                                                  *mut SLboolean)
                                             -> SLresult>,
    pub SetDirectLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEffectSendItf,
                                                                   directLevel:
                                                                       SLmillibel)
                                                  -> SLresult>,
    pub GetDirectLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEffectSendItf,
                                                                   pDirectLevel:
                                                                       *mut SLmillibel)
                                                  -> SLresult>,
    pub SetSendLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEffectSendItf,
                                                                 pAuxEffect:
                                                                     *const ::std::os::raw::c_void,
                                                                 sendLevel:
                                                                     SLmillibel)
                                                -> SLresult>,
    pub GetSendLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEffectSendItf,
                                                                 pAuxEffect:
                                                                     *const ::std::os::raw::c_void,
                                                                 pSendLevel:
                                                                     *mut SLmillibel)
                                                -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLEffectSendItf_() {
    assert_eq!(::std::mem::size_of::<SLEffectSendItf_>() , 48usize , concat !
               ( "Size of: " , stringify ! ( SLEffectSendItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLEffectSendItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLEffectSendItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEffectSendItf_ ) ) . EnableEffectSend
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEffectSendItf_ ) ,
                "::" , stringify ! ( EnableEffectSend ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEffectSendItf_ ) ) . IsEnabled as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEffectSendItf_ ) ,
                "::" , stringify ! ( IsEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEffectSendItf_ ) ) . SetDirectLevel as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEffectSendItf_ ) ,
                "::" , stringify ! ( SetDirectLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEffectSendItf_ ) ) . GetDirectLevel as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEffectSendItf_ ) ,
                "::" , stringify ! ( GetDirectLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEffectSendItf_ ) ) . SetSendLevel as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEffectSendItf_ ) ,
                "::" , stringify ! ( SetSendLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEffectSendItf_ ) ) . GetSendLevel as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEffectSendItf_ ) ,
                "::" , stringify ! ( GetSendLevel ) ));
}
impl Clone for SLEffectSendItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEffectSendItf = *const *const SLEffectSendItf_;
extern "C" {
    pub static SL_IID_3DGROUPING: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SL3DGroupingItf_ {
    pub Set3DGroup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SL3DGroupingItf,
                                                               group:
                                                                   SLObjectItf)
                                              -> SLresult>,
    pub Get3DGroup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SL3DGroupingItf,
                                                               pGroup:
                                                                   *mut SLObjectItf)
                                              -> SLresult>,
}
#[test]
fn bindgen_test_layout_SL3DGroupingItf_() {
    assert_eq!(::std::mem::size_of::<SL3DGroupingItf_>() , 16usize , concat !
               ( "Size of: " , stringify ! ( SL3DGroupingItf_ ) ));
    assert_eq! (::std::mem::align_of::<SL3DGroupingItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SL3DGroupingItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DGroupingItf_ ) ) . Set3DGroup as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DGroupingItf_ ) ,
                "::" , stringify ! ( Set3DGroup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DGroupingItf_ ) ) . Get3DGroup as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DGroupingItf_ ) ,
                "::" , stringify ! ( Get3DGroup ) ));
}
impl Clone for SL3DGroupingItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SL3DGroupingItf = *const *const SL3DGroupingItf_;
extern "C" {
    pub static SL_IID_3DCOMMIT: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SL3DCommitItf_ {
    pub Commit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               SL3DCommitItf)
                                          -> SLresult>,
    pub SetDeferred: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SL3DCommitItf,
                                                                deferred:
                                                                    SLboolean)
                                               -> SLresult>,
}
#[test]
fn bindgen_test_layout_SL3DCommitItf_() {
    assert_eq!(::std::mem::size_of::<SL3DCommitItf_>() , 16usize , concat ! (
               "Size of: " , stringify ! ( SL3DCommitItf_ ) ));
    assert_eq! (::std::mem::align_of::<SL3DCommitItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SL3DCommitItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DCommitItf_ ) ) . Commit as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DCommitItf_ ) , "::"
                , stringify ! ( Commit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DCommitItf_ ) ) . SetDeferred as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DCommitItf_ ) , "::"
                , stringify ! ( SetDeferred ) ));
}
impl Clone for SL3DCommitItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SL3DCommitItf = *const *const SL3DCommitItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLVec3D_ {
    pub x: SLint32,
    pub y: SLint32,
    pub z: SLint32,
}
#[test]
fn bindgen_test_layout_SLVec3D_() {
    assert_eq!(::std::mem::size_of::<SLVec3D_>() , 12usize , concat ! (
               "Size of: " , stringify ! ( SLVec3D_ ) ));
    assert_eq! (::std::mem::align_of::<SLVec3D_>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( SLVec3D_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVec3D_ ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVec3D_ ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVec3D_ ) ) . y as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVec3D_ ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVec3D_ ) ) . z as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVec3D_ ) , "::" ,
                stringify ! ( z ) ));
}
impl Clone for SLVec3D_ {
    fn clone(&self) -> Self { *self }
}
pub type SLVec3D = SLVec3D_;
extern "C" {
    pub static SL_IID_3DLOCATION: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SL3DLocationItf_ {
    pub SetLocationCartesian: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DLocationItf,
                                                                         pLocation:
                                                                             *const SLVec3D)
                                                        -> SLresult>,
    pub SetLocationSpherical: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DLocationItf,
                                                                         azimuth:
                                                                             SLmillidegree,
                                                                         elevation:
                                                                             SLmillidegree,
                                                                         distance:
                                                                             SLmillimeter)
                                                        -> SLresult>,
    pub Move: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             SL3DLocationItf,
                                                         pMovement:
                                                             *const SLVec3D)
                                        -> SLresult>,
    pub GetLocationCartesian: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DLocationItf,
                                                                         pLocation:
                                                                             *mut SLVec3D)
                                                        -> SLresult>,
    pub SetOrientationVectors: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SL3DLocationItf,
                                                                          pFront:
                                                                              *const SLVec3D,
                                                                          pAbove:
                                                                              *const SLVec3D)
                                                         -> SLresult>,
    pub SetOrientationAngles: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DLocationItf,
                                                                         heading:
                                                                             SLmillidegree,
                                                                         pitch:
                                                                             SLmillidegree,
                                                                         roll:
                                                                             SLmillidegree)
                                                        -> SLresult>,
    pub Rotate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               SL3DLocationItf,
                                                           theta:
                                                               SLmillidegree,
                                                           pAxis:
                                                               *const SLVec3D)
                                          -> SLresult>,
    pub GetOrientationVectors: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SL3DLocationItf,
                                                                          pFront:
                                                                              *mut SLVec3D,
                                                                          pUp:
                                                                              *mut SLVec3D)
                                                         -> SLresult>,
}
#[test]
fn bindgen_test_layout_SL3DLocationItf_() {
    assert_eq!(::std::mem::size_of::<SL3DLocationItf_>() , 64usize , concat !
               ( "Size of: " , stringify ! ( SL3DLocationItf_ ) ));
    assert_eq! (::std::mem::align_of::<SL3DLocationItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SL3DLocationItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) .
                SetLocationCartesian as * const _ as usize } , 0usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( SetLocationCartesian ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) .
                SetLocationSpherical as * const _ as usize } , 8usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( SetLocationSpherical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) . Move as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( Move ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) .
                GetLocationCartesian as * const _ as usize } , 24usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( GetLocationCartesian ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) .
                SetOrientationVectors as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( SetOrientationVectors ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) .
                SetOrientationAngles as * const _ as usize } , 40usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( SetOrientationAngles ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) . Rotate as * const
                _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( Rotate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DLocationItf_ ) ) .
                GetOrientationVectors as * const _ as usize } , 56usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DLocationItf_ ) ,
                "::" , stringify ! ( GetOrientationVectors ) ));
}
impl Clone for SL3DLocationItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SL3DLocationItf = *const *const SL3DLocationItf_;
extern "C" {
    pub static SL_IID_3DDOPPLER: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SL3DDopplerItf_ {
    pub SetVelocityCartesian: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DDopplerItf,
                                                                         pVelocity:
                                                                             *const SLVec3D)
                                                        -> SLresult>,
    pub SetVelocitySpherical: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DDopplerItf,
                                                                         azimuth:
                                                                             SLmillidegree,
                                                                         elevation:
                                                                             SLmillidegree,
                                                                         speed:
                                                                             SLmillimeter)
                                                        -> SLresult>,
    pub GetVelocityCartesian: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DDopplerItf,
                                                                         pVelocity:
                                                                             *mut SLVec3D)
                                                        -> SLresult>,
    pub SetDopplerFactor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SL3DDopplerItf,
                                                                     dopplerFactor:
                                                                         SLpermille)
                                                    -> SLresult>,
    pub GetDopplerFactor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SL3DDopplerItf,
                                                                     pDopplerFactor:
                                                                         *mut SLpermille)
                                                    -> SLresult>,
}
#[test]
fn bindgen_test_layout_SL3DDopplerItf_() {
    assert_eq!(::std::mem::size_of::<SL3DDopplerItf_>() , 40usize , concat ! (
               "Size of: " , stringify ! ( SL3DDopplerItf_ ) ));
    assert_eq! (::std::mem::align_of::<SL3DDopplerItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SL3DDopplerItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DDopplerItf_ ) ) .
                SetVelocityCartesian as * const _ as usize } , 0usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SL3DDopplerItf_ ) ,
                "::" , stringify ! ( SetVelocityCartesian ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DDopplerItf_ ) ) .
                SetVelocitySpherical as * const _ as usize } , 8usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SL3DDopplerItf_ ) ,
                "::" , stringify ! ( SetVelocitySpherical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DDopplerItf_ ) ) .
                GetVelocityCartesian as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DDopplerItf_ ) ,
                "::" , stringify ! ( GetVelocityCartesian ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DDopplerItf_ ) ) . SetDopplerFactor as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DDopplerItf_ ) ,
                "::" , stringify ! ( SetDopplerFactor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DDopplerItf_ ) ) . GetDopplerFactor as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DDopplerItf_ ) ,
                "::" , stringify ! ( GetDopplerFactor ) ));
}
impl Clone for SL3DDopplerItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SL3DDopplerItf = *const *const SL3DDopplerItf_;
extern "C" {
    pub static SL_IID_3DSOURCE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SL3DSourceItf_ {
    pub SetHeadRelative: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SL3DSourceItf,
                                                                    headRelative:
                                                                        SLboolean)
                                                   -> SLresult>,
    pub GetHeadRelative: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SL3DSourceItf,
                                                                    pHeadRelative:
                                                                        *mut SLboolean)
                                                   -> SLresult>,
    pub SetRolloffDistances: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SL3DSourceItf,
                                                                        minDistance:
                                                                            SLmillimeter,
                                                                        maxDistance:
                                                                            SLmillimeter)
                                                       -> SLresult>,
    pub GetRolloffDistances: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SL3DSourceItf,
                                                                        pMinDistance:
                                                                            *mut SLmillimeter,
                                                                        pMaxDistance:
                                                                            *mut SLmillimeter)
                                                       -> SLresult>,
    pub SetRolloffMaxDistanceMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  SL3DSourceItf,
                                                                              mute:
                                                                                  SLboolean)
                                                             -> SLresult>,
    pub GetRolloffMaxDistanceMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  SL3DSourceItf,
                                                                              pMute:
                                                                                  *mut SLboolean)
                                                             -> SLresult>,
    pub SetRolloffFactor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SL3DSourceItf,
                                                                     rolloffFactor:
                                                                         SLpermille)
                                                    -> SLresult>,
    pub GetRolloffFactor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SL3DSourceItf,
                                                                     pRolloffFactor:
                                                                         *mut SLpermille)
                                                    -> SLresult>,
    pub SetRoomRolloffFactor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DSourceItf,
                                                                         roomRolloffFactor:
                                                                             SLpermille)
                                                        -> SLresult>,
    pub GetRoomRolloffFactor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DSourceItf,
                                                                         pRoomRolloffFactor:
                                                                             *mut SLpermille)
                                                        -> SLresult>,
    pub SetRolloffModel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SL3DSourceItf,
                                                                    model:
                                                                        SLuint8)
                                                   -> SLresult>,
    pub GetRolloffModel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SL3DSourceItf,
                                                                    pModel:
                                                                        *mut SLuint8)
                                                   -> SLresult>,
    pub SetCone: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SL3DSourceItf,
                                                            innerAngle:
                                                                SLmillidegree,
                                                            outerAngle:
                                                                SLmillidegree,
                                                            outerLevel:
                                                                SLmillibel)
                                           -> SLresult>,
    pub GetCone: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SL3DSourceItf,
                                                            pInnerAngle:
                                                                *mut SLmillidegree,
                                                            pOuterAngle:
                                                                *mut SLmillidegree,
                                                            pOuterLevel:
                                                                *mut SLmillibel)
                                           -> SLresult>,
}
#[test]
fn bindgen_test_layout_SL3DSourceItf_() {
    assert_eq!(::std::mem::size_of::<SL3DSourceItf_>() , 112usize , concat ! (
               "Size of: " , stringify ! ( SL3DSourceItf_ ) ));
    assert_eq! (::std::mem::align_of::<SL3DSourceItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SL3DSourceItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . SetHeadRelative as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetHeadRelative ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . GetHeadRelative as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetHeadRelative ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . SetRolloffDistances
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetRolloffDistances ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . GetRolloffDistances
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetRolloffDistances ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) .
                SetRolloffMaxDistanceMute as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetRolloffMaxDistanceMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) .
                GetRolloffMaxDistanceMute as * const _ as usize } , 40usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetRolloffMaxDistanceMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . SetRolloffFactor as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetRolloffFactor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . GetRolloffFactor as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetRolloffFactor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . SetRoomRolloffFactor
                as * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetRoomRolloffFactor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . GetRoomRolloffFactor
                as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetRoomRolloffFactor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . SetRolloffModel as *
                const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetRolloffModel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . GetRolloffModel as *
                const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetRolloffModel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . SetCone as * const _
                as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( SetCone ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DSourceItf_ ) ) . GetCone as * const _
                as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DSourceItf_ ) , "::"
                , stringify ! ( GetCone ) ));
}
impl Clone for SL3DSourceItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SL3DSourceItf = *const *const SL3DSourceItf_;
extern "C" {
    pub static SL_IID_3DMACROSCOPIC: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SL3DMacroscopicItf_ {
    pub SetSize: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SL3DMacroscopicItf,
                                                            width:
                                                                SLmillimeter,
                                                            height:
                                                                SLmillimeter,
                                                            depth:
                                                                SLmillimeter)
                                           -> SLresult>,
    pub GetSize: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SL3DMacroscopicItf,
                                                            pWidth:
                                                                *mut SLmillimeter,
                                                            pHeight:
                                                                *mut SLmillimeter,
                                                            pDepth:
                                                                *mut SLmillimeter)
                                           -> SLresult>,
    pub SetOrientationAngles: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SL3DMacroscopicItf,
                                                                         heading:
                                                                             SLmillidegree,
                                                                         pitch:
                                                                             SLmillidegree,
                                                                         roll:
                                                                             SLmillidegree)
                                                        -> SLresult>,
    pub SetOrientationVectors: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SL3DMacroscopicItf,
                                                                          pFront:
                                                                              *const SLVec3D,
                                                                          pAbove:
                                                                              *const SLVec3D)
                                                         -> SLresult>,
    pub Rotate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               SL3DMacroscopicItf,
                                                           theta:
                                                               SLmillidegree,
                                                           pAxis:
                                                               *const SLVec3D)
                                          -> SLresult>,
    pub GetOrientationVectors: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SL3DMacroscopicItf,
                                                                          pFront:
                                                                              *mut SLVec3D,
                                                                          pUp:
                                                                              *mut SLVec3D)
                                                         -> SLresult>,
}
#[test]
fn bindgen_test_layout_SL3DMacroscopicItf_() {
    assert_eq!(::std::mem::size_of::<SL3DMacroscopicItf_>() , 48usize , concat
               ! ( "Size of: " , stringify ! ( SL3DMacroscopicItf_ ) ));
    assert_eq! (::std::mem::align_of::<SL3DMacroscopicItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SL3DMacroscopicItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DMacroscopicItf_ ) ) . SetSize as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DMacroscopicItf_ ) ,
                "::" , stringify ! ( SetSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DMacroscopicItf_ ) ) . GetSize as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DMacroscopicItf_ ) ,
                "::" , stringify ! ( GetSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DMacroscopicItf_ ) ) .
                SetOrientationAngles as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DMacroscopicItf_ ) ,
                "::" , stringify ! ( SetOrientationAngles ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DMacroscopicItf_ ) ) .
                SetOrientationVectors as * const _ as usize } , 24usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DMacroscopicItf_ ) ,
                "::" , stringify ! ( SetOrientationVectors ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DMacroscopicItf_ ) ) . Rotate as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SL3DMacroscopicItf_ ) ,
                "::" , stringify ! ( Rotate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SL3DMacroscopicItf_ ) ) .
                GetOrientationVectors as * const _ as usize } , 40usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SL3DMacroscopicItf_ ) ,
                "::" , stringify ! ( GetOrientationVectors ) ));
}
impl Clone for SL3DMacroscopicItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SL3DMacroscopicItf = *const *const SL3DMacroscopicItf_;
extern "C" {
    pub static SL_IID_MUTESOLO: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMuteSoloItf_ {
    pub SetChannelMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMuteSoloItf,
                                                                   chan:
                                                                       SLuint8,
                                                                   mute:
                                                                       SLboolean)
                                                  -> SLresult>,
    pub GetChannelMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMuteSoloItf,
                                                                   chan:
                                                                       SLuint8,
                                                                   pMute:
                                                                       *mut SLboolean)
                                                  -> SLresult>,
    pub SetChannelSolo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMuteSoloItf,
                                                                   chan:
                                                                       SLuint8,
                                                                   solo:
                                                                       SLboolean)
                                                  -> SLresult>,
    pub GetChannelSolo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMuteSoloItf,
                                                                   chan:
                                                                       SLuint8,
                                                                   pSolo:
                                                                       *mut SLboolean)
                                                  -> SLresult>,
    pub GetNumChannels: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMuteSoloItf,
                                                                   pNumChannels:
                                                                       *mut SLuint8)
                                                  -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLMuteSoloItf_() {
    assert_eq!(::std::mem::size_of::<SLMuteSoloItf_>() , 40usize , concat ! (
               "Size of: " , stringify ! ( SLMuteSoloItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMuteSoloItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLMuteSoloItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMuteSoloItf_ ) ) . SetChannelMute as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMuteSoloItf_ ) , "::"
                , stringify ! ( SetChannelMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMuteSoloItf_ ) ) . GetChannelMute as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMuteSoloItf_ ) , "::"
                , stringify ! ( GetChannelMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMuteSoloItf_ ) ) . SetChannelSolo as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMuteSoloItf_ ) , "::"
                , stringify ! ( SetChannelSolo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMuteSoloItf_ ) ) . GetChannelSolo as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMuteSoloItf_ ) , "::"
                , stringify ! ( GetChannelSolo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMuteSoloItf_ ) ) . GetNumChannels as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMuteSoloItf_ ) , "::"
                , stringify ! ( GetNumChannels ) ));
}
impl Clone for SLMuteSoloItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMuteSoloItf = *const *const SLMuteSoloItf_;
extern "C" {
    pub static SL_IID_DYNAMICINTERFACEMANAGEMENT: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDynamicInterfaceManagementItf_ {
    pub AddInterface: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLDynamicInterfaceManagementItf,
                                                                 iid:
                                                                     SLInterfaceID,
                                                                 async:
                                                                     SLboolean)
                                                -> SLresult>,
    pub RemoveInterface: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLDynamicInterfaceManagementItf,
                                                                    iid:
                                                                        SLInterfaceID)
                                                   -> SLresult>,
    pub ResumeInterface: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLDynamicInterfaceManagementItf,
                                                                    iid:
                                                                        SLInterfaceID,
                                                                    async:
                                                                        SLboolean)
                                                   -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLDynamicInterfaceManagementItf,
                                                                     callback:
                                                                         slDynamicInterfaceManagementCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLDynamicInterfaceManagementItf_() {
    assert_eq!(::std::mem::size_of::<SLDynamicInterfaceManagementItf_>() ,
               32usize , concat ! (
               "Size of: " , stringify ! ( SLDynamicInterfaceManagementItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLDynamicInterfaceManagementItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                SLDynamicInterfaceManagementItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDynamicInterfaceManagementItf_ ) ) .
                AddInterface as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDynamicInterfaceManagementItf_ ) , "::" , stringify ! (
                AddInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDynamicInterfaceManagementItf_ ) ) .
                RemoveInterface as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDynamicInterfaceManagementItf_ ) , "::" , stringify ! (
                RemoveInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDynamicInterfaceManagementItf_ ) ) .
                ResumeInterface as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDynamicInterfaceManagementItf_ ) , "::" , stringify ! (
                ResumeInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDynamicInterfaceManagementItf_ ) ) .
                RegisterCallback as * const _ as usize } , 24usize , concat !
                (
                "Alignment of field: " , stringify ! (
                SLDynamicInterfaceManagementItf_ ) , "::" , stringify ! (
                RegisterCallback ) ));
}
impl Clone for SLDynamicInterfaceManagementItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDynamicInterfaceManagementItf =
    *const *const SLDynamicInterfaceManagementItf_;
pub type slDynamicInterfaceManagementCallback =
    ::std::option::Option<unsafe extern "C" fn(caller:
                                                   SLDynamicInterfaceManagementItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               event: SLuint32,
                                               result: SLresult,
                                               iid: SLInterfaceID)>;
extern "C" {
    pub static SL_IID_MIDIMESSAGE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMIDIMessageItf_ {
    pub SendMessage: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLMIDIMessageItf,
                                                                data:
                                                                    *const SLuint8,
                                                                length:
                                                                    SLuint32)
                                               -> SLresult>,
    pub RegisterMetaEventCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  SLMIDIMessageItf,
                                                                              callback:
                                                                                  slMetaEventCallback,
                                                                              pContext:
                                                                                  *mut ::std::os::raw::c_void)
                                                             -> SLresult>,
    pub RegisterMIDIMessageCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLMIDIMessageItf,
                                                                                callback:
                                                                                    slMIDIMessageCallback,
                                                                                pContext:
                                                                                    *mut ::std::os::raw::c_void)
                                                               -> SLresult>,
    pub AddMIDIMessageCallbackFilter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     SLMIDIMessageItf,
                                                                                 messageType:
                                                                                     SLuint32)
                                                                -> SLresult>,
    pub ClearMIDIMessageCallbackFilter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                       SLMIDIMessageItf)
                                                                  ->
                                                                      SLresult>,
}
#[test]
fn bindgen_test_layout_SLMIDIMessageItf_() {
    assert_eq!(::std::mem::size_of::<SLMIDIMessageItf_>() , 40usize , concat !
               ( "Size of: " , stringify ! ( SLMIDIMessageItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMIDIMessageItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLMIDIMessageItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMessageItf_ ) ) . SendMessage as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMessageItf_ ) ,
                "::" , stringify ! ( SendMessage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMessageItf_ ) ) .
                RegisterMetaEventCallback as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMessageItf_ ) ,
                "::" , stringify ! ( RegisterMetaEventCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMessageItf_ ) ) .
                RegisterMIDIMessageCallback as * const _ as usize } , 16usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMessageItf_ ) ,
                "::" , stringify ! ( RegisterMIDIMessageCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMessageItf_ ) ) .
                AddMIDIMessageCallbackFilter as * const _ as usize } , 24usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMessageItf_ ) ,
                "::" , stringify ! ( AddMIDIMessageCallbackFilter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMessageItf_ ) ) .
                ClearMIDIMessageCallbackFilter as * const _ as usize } ,
                32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMessageItf_ ) ,
                "::" , stringify ! ( ClearMIDIMessageCallbackFilter ) ));
}
impl Clone for SLMIDIMessageItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMIDIMessageItf = *const *const SLMIDIMessageItf_;
pub type slMetaEventCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLMIDIMessageItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               type_: SLuint8,
                                               length: SLuint32,
                                               pData: *const SLuint8,
                                               tick: SLuint32,
                                               track: SLuint16)>;
pub type slMIDIMessageCallback =
    ::std::option::Option<unsafe extern "C" fn(caller: SLMIDIMessageItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void,
                                               statusByte: SLuint8,
                                               length: SLuint32,
                                               pData: *const SLuint8,
                                               tick: SLuint32,
                                               track: SLuint16)>;
extern "C" {
    pub static SL_IID_MIDIMUTESOLO: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMIDIMuteSoloItf_ {
    pub SetChannelMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMIDIMuteSoloItf,
                                                                   channel:
                                                                       SLuint8,
                                                                   mute:
                                                                       SLboolean)
                                                  -> SLresult>,
    pub GetChannelMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMIDIMuteSoloItf,
                                                                   channel:
                                                                       SLuint8,
                                                                   pMute:
                                                                       *mut SLboolean)
                                                  -> SLresult>,
    pub SetChannelSolo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMIDIMuteSoloItf,
                                                                   channel:
                                                                       SLuint8,
                                                                   solo:
                                                                       SLboolean)
                                                  -> SLresult>,
    pub GetChannelSolo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLMIDIMuteSoloItf,
                                                                   channel:
                                                                       SLuint8,
                                                                   pSolo:
                                                                       *mut SLboolean)
                                                  -> SLresult>,
    pub GetTrackCount: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLMIDIMuteSoloItf,
                                                                  pCount:
                                                                      *mut SLuint16)
                                                 -> SLresult>,
    pub SetTrackMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMIDIMuteSoloItf,
                                                                 track:
                                                                     SLuint16,
                                                                 mute:
                                                                     SLboolean)
                                                -> SLresult>,
    pub GetTrackMute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMIDIMuteSoloItf,
                                                                 track:
                                                                     SLuint16,
                                                                 pMute:
                                                                     *mut SLboolean)
                                                -> SLresult>,
    pub SetTrackSolo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMIDIMuteSoloItf,
                                                                 track:
                                                                     SLuint16,
                                                                 solo:
                                                                     SLboolean)
                                                -> SLresult>,
    pub GetTrackSolo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLMIDIMuteSoloItf,
                                                                 track:
                                                                     SLuint16,
                                                                 pSolo:
                                                                     *mut SLboolean)
                                                -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLMIDIMuteSoloItf_() {
    assert_eq!(::std::mem::size_of::<SLMIDIMuteSoloItf_>() , 72usize , concat
               ! ( "Size of: " , stringify ! ( SLMIDIMuteSoloItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMIDIMuteSoloItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLMIDIMuteSoloItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . SetChannelMute
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( SetChannelMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . GetChannelMute
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( GetChannelMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . SetChannelSolo
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( SetChannelSolo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . GetChannelSolo
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( GetChannelSolo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . GetTrackCount as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( GetTrackCount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . SetTrackMute as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( SetTrackMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . GetTrackMute as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( GetTrackMute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . SetTrackSolo as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( SetTrackSolo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDIMuteSoloItf_ ) ) . GetTrackSolo as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDIMuteSoloItf_ ) ,
                "::" , stringify ! ( GetTrackSolo ) ));
}
impl Clone for SLMIDIMuteSoloItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMIDIMuteSoloItf = *const *const SLMIDIMuteSoloItf_;
extern "C" {
    pub static SL_IID_MIDITEMPO: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMIDITempoItf_ {
    pub SetTicksPerQuarterNote: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               SLMIDITempoItf,
                                                                           tpqn:
                                                                               SLuint32)
                                                          -> SLresult>,
    pub GetTicksPerQuarterNote: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               SLMIDITempoItf,
                                                                           pTpqn:
                                                                               *mut SLuint32)
                                                          -> SLresult>,
    pub SetMicrosecondsPerQuarterNote: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      SLMIDITempoItf,
                                                                                  uspqn:
                                                                                      SLmicrosecond)
                                                                 -> SLresult>,
    pub GetMicrosecondsPerQuarterNote: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      SLMIDITempoItf,
                                                                                  uspqn:
                                                                                      *mut SLmicrosecond)
                                                                 -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLMIDITempoItf_() {
    assert_eq!(::std::mem::size_of::<SLMIDITempoItf_>() , 32usize , concat ! (
               "Size of: " , stringify ! ( SLMIDITempoItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMIDITempoItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLMIDITempoItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITempoItf_ ) ) .
                SetTicksPerQuarterNote as * const _ as usize } , 0usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITempoItf_ ) ,
                "::" , stringify ! ( SetTicksPerQuarterNote ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITempoItf_ ) ) .
                GetTicksPerQuarterNote as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITempoItf_ ) ,
                "::" , stringify ! ( GetTicksPerQuarterNote ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITempoItf_ ) ) .
                SetMicrosecondsPerQuarterNote as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITempoItf_ ) ,
                "::" , stringify ! ( SetMicrosecondsPerQuarterNote ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITempoItf_ ) ) .
                GetMicrosecondsPerQuarterNote as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITempoItf_ ) ,
                "::" , stringify ! ( GetMicrosecondsPerQuarterNote ) ));
}
impl Clone for SLMIDITempoItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMIDITempoItf = *const *const SLMIDITempoItf_;
extern "C" {
    pub static SL_IID_MIDITIME: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLMIDITimeItf_ {
    pub GetDuration: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLMIDITimeItf,
                                                                pDuration:
                                                                    *mut SLuint32)
                                               -> SLresult>,
    pub SetPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLMIDITimeItf,
                                                                position:
                                                                    SLuint32)
                                               -> SLresult>,
    pub GetPosition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLMIDITimeItf,
                                                                pPosition:
                                                                    *mut SLuint32)
                                               -> SLresult>,
    pub SetLoopPoints: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLMIDITimeItf,
                                                                  startTick:
                                                                      SLuint32,
                                                                  numTicks:
                                                                      SLuint32)
                                                 -> SLresult>,
    pub GetLoopPoints: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLMIDITimeItf,
                                                                  pStartTick:
                                                                      *mut SLuint32,
                                                                  pNumTicks:
                                                                      *mut SLuint32)
                                                 -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLMIDITimeItf_() {
    assert_eq!(::std::mem::size_of::<SLMIDITimeItf_>() , 40usize , concat ! (
               "Size of: " , stringify ! ( SLMIDITimeItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLMIDITimeItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLMIDITimeItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITimeItf_ ) ) . GetDuration as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITimeItf_ ) , "::"
                , stringify ! ( GetDuration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITimeItf_ ) ) . SetPosition as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITimeItf_ ) , "::"
                , stringify ! ( SetPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITimeItf_ ) ) . GetPosition as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITimeItf_ ) , "::"
                , stringify ! ( GetPosition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITimeItf_ ) ) . SetLoopPoints as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITimeItf_ ) , "::"
                , stringify ! ( SetLoopPoints ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLMIDITimeItf_ ) ) . GetLoopPoints as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLMIDITimeItf_ ) , "::"
                , stringify ! ( GetLoopPoints ) ));
}
impl Clone for SLMIDITimeItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLMIDITimeItf = *const *const SLMIDITimeItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioCodecDescriptor_ {
    pub maxChannels: SLuint32,
    pub minBitsPerSample: SLuint32,
    pub maxBitsPerSample: SLuint32,
    pub minSampleRate: SLmilliHertz,
    pub maxSampleRate: SLmilliHertz,
    pub isFreqRangeContinuous: SLboolean,
    pub pSampleRatesSupported: *mut SLmilliHertz,
    pub numSampleRatesSupported: SLuint32,
    pub minBitRate: SLuint32,
    pub maxBitRate: SLuint32,
    pub isBitrateRangeContinuous: SLboolean,
    pub pBitratesSupported: *mut SLuint32,
    pub numBitratesSupported: SLuint32,
    pub profileSetting: SLuint32,
    pub modeSetting: SLuint32,
}
#[test]
fn bindgen_test_layout_SLAudioCodecDescriptor_() {
    assert_eq!(::std::mem::size_of::<SLAudioCodecDescriptor_>() , 72usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAudioCodecDescriptor_ ) ));
    assert_eq! (::std::mem::align_of::<SLAudioCodecDescriptor_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAudioCodecDescriptor_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) . maxChannels
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( maxChannels ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                minBitsPerSample as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( minBitsPerSample ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                maxBitsPerSample as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( maxBitsPerSample ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                minSampleRate as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( minSampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                maxSampleRate as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( maxSampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                isFreqRangeContinuous as * const _ as usize } , 20usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( isFreqRangeContinuous ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                pSampleRatesSupported as * const _ as usize } , 24usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( pSampleRatesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                numSampleRatesSupported as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( numSampleRatesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) . minBitRate
                as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( minBitRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) . maxBitRate
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( maxBitRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                isBitrateRangeContinuous as * const _ as usize } , 44usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( isBitrateRangeContinuous ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                pBitratesSupported as * const _ as usize } , 48usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( pBitratesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                numBitratesSupported as * const _ as usize } , 56usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( numBitratesSupported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) .
                profileSetting as * const _ as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( profileSetting ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecDescriptor_ ) ) . modeSetting
                as * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioCodecDescriptor_
                ) , "::" , stringify ! ( modeSetting ) ));
}
impl Clone for SLAudioCodecDescriptor_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioCodecDescriptor = SLAudioCodecDescriptor_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioCodecProfileMode_ {
    pub profileSetting: SLuint32,
    pub modeSetting: SLuint32,
}
#[test]
fn bindgen_test_layout_SLAudioCodecProfileMode_() {
    assert_eq!(::std::mem::size_of::<SLAudioCodecProfileMode_>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAudioCodecProfileMode_ ) ));
    assert_eq! (::std::mem::align_of::<SLAudioCodecProfileMode_>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAudioCodecProfileMode_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecProfileMode_ ) ) .
                profileSetting as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioCodecProfileMode_ ) , "::" , stringify ! (
                profileSetting ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioCodecProfileMode_ ) ) .
                modeSetting as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioCodecProfileMode_ ) , "::" , stringify ! ( modeSetting
                ) ));
}
impl Clone for SLAudioCodecProfileMode_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioCodecProfileMode = SLAudioCodecProfileMode_;
extern "C" {
    pub static SL_IID_AUDIODECODERCAPABILITIES: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioDecoderCapabilitiesItf_ {
    pub GetAudioDecoders: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAudioDecoderCapabilitiesItf,
                                                                     pNumDecoders:
                                                                         *mut SLuint32,
                                                                     pDecoderIds:
                                                                         *mut SLuint32)
                                                    -> SLresult>,
    pub GetAudioDecoderCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLAudioDecoderCapabilitiesItf,
                                                                                decoderId:
                                                                                    SLuint32,
                                                                                pIndex:
                                                                                    *mut SLuint32,
                                                                                pDescriptor:
                                                                                    *mut SLAudioCodecDescriptor)
                                                               -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAudioDecoderCapabilitiesItf_() {
    assert_eq!(::std::mem::size_of::<SLAudioDecoderCapabilitiesItf_>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( SLAudioDecoderCapabilitiesItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAudioDecoderCapabilitiesItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( SLAudioDecoderCapabilitiesItf_
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioDecoderCapabilitiesItf_ ) ) .
                GetAudioDecoders as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioDecoderCapabilitiesItf_ ) , "::" , stringify ! (
                GetAudioDecoders ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioDecoderCapabilitiesItf_ ) ) .
                GetAudioDecoderCapabilities as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioDecoderCapabilitiesItf_ ) , "::" , stringify ! (
                GetAudioDecoderCapabilities ) ));
}
impl Clone for SLAudioDecoderCapabilitiesItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioDecoderCapabilitiesItf =
    *const *const SLAudioDecoderCapabilitiesItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioEncoderSettings_ {
    pub encoderId: SLuint32,
    pub channelsIn: SLuint32,
    pub channelsOut: SLuint32,
    pub sampleRate: SLmilliHertz,
    pub bitRate: SLuint32,
    pub bitsPerSample: SLuint32,
    pub rateControl: SLuint32,
    pub profileSetting: SLuint32,
    pub levelSetting: SLuint32,
    pub channelMode: SLuint32,
    pub streamFormat: SLuint32,
    pub encodeOptions: SLuint32,
    pub blockAlignment: SLuint32,
}
#[test]
fn bindgen_test_layout_SLAudioEncoderSettings_() {
    assert_eq!(::std::mem::size_of::<SLAudioEncoderSettings_>() , 52usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAudioEncoderSettings_ ) ));
    assert_eq! (::std::mem::align_of::<SLAudioEncoderSettings_>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAudioEncoderSettings_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . encoderId
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( encoderId ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . channelsIn
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( channelsIn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . channelsOut
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( channelsOut ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . sampleRate
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( sampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . bitRate as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( bitRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) .
                bitsPerSample as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( bitsPerSample ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . rateControl
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( rateControl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) .
                profileSetting as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( profileSetting ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) .
                levelSetting as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( levelSetting ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) . channelMode
                as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( channelMode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) .
                streamFormat as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( streamFormat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) .
                encodeOptions as * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( encodeOptions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderSettings_ ) ) .
                blockAlignment as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAudioEncoderSettings_
                ) , "::" , stringify ! ( blockAlignment ) ));
}
impl Clone for SLAudioEncoderSettings_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioEncoderSettings = SLAudioEncoderSettings_;
extern "C" {
    pub static SL_IID_AUDIOENCODERCAPABILITIES: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioEncoderCapabilitiesItf_ {
    pub GetAudioEncoders: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAudioEncoderCapabilitiesItf,
                                                                     pNumEncoders:
                                                                         *mut SLuint32,
                                                                     pEncoderIds:
                                                                         *mut SLuint32)
                                                    -> SLresult>,
    pub GetAudioEncoderCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLAudioEncoderCapabilitiesItf,
                                                                                encoderId:
                                                                                    SLuint32,
                                                                                pIndex:
                                                                                    *mut SLuint32,
                                                                                pDescriptor:
                                                                                    *mut SLAudioCodecDescriptor)
                                                               -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAudioEncoderCapabilitiesItf_() {
    assert_eq!(::std::mem::size_of::<SLAudioEncoderCapabilitiesItf_>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( SLAudioEncoderCapabilitiesItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAudioEncoderCapabilitiesItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( SLAudioEncoderCapabilitiesItf_
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderCapabilitiesItf_ ) ) .
                GetAudioEncoders as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioEncoderCapabilitiesItf_ ) , "::" , stringify ! (
                GetAudioEncoders ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderCapabilitiesItf_ ) ) .
                GetAudioEncoderCapabilities as * const _ as usize } , 8usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAudioEncoderCapabilitiesItf_ ) , "::" , stringify ! (
                GetAudioEncoderCapabilities ) ));
}
impl Clone for SLAudioEncoderCapabilitiesItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioEncoderCapabilitiesItf =
    *const *const SLAudioEncoderCapabilitiesItf_;
extern "C" {
    pub static SL_IID_AUDIOENCODER: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAudioEncoderItf_ {
    pub SetEncoderSettings: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           SLAudioEncoderItf,
                                                                       pSettings:
                                                                           *mut SLAudioEncoderSettings)
                                                      -> SLresult>,
    pub GetEncoderSettings: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           SLAudioEncoderItf,
                                                                       pSettings:
                                                                           *mut SLAudioEncoderSettings)
                                                      -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAudioEncoderItf_() {
    assert_eq!(::std::mem::size_of::<SLAudioEncoderItf_>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( SLAudioEncoderItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAudioEncoderItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLAudioEncoderItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderItf_ ) ) .
                SetEncoderSettings as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! ( SLAudioEncoderItf_ ) ,
                "::" , stringify ! ( SetEncoderSettings ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAudioEncoderItf_ ) ) .
                GetEncoderSettings as * const _ as usize } , 8usize , concat !
                (
                "Alignment of field: " , stringify ! ( SLAudioEncoderItf_ ) ,
                "::" , stringify ! ( GetEncoderSettings ) ));
}
impl Clone for SLAudioEncoderItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAudioEncoderItf = *const *const SLAudioEncoderItf_;
extern "C" {
    pub static SL_IID_BASSBOOST: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLBassBoostItf_ {
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLBassBoostItf,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLBassBoostItf,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
    pub SetStrength: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLBassBoostItf,
                                                                strength:
                                                                    SLpermille)
                                               -> SLresult>,
    pub GetRoundedStrength: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           SLBassBoostItf,
                                                                       pStrength:
                                                                           *mut SLpermille)
                                                      -> SLresult>,
    pub IsStrengthSupported: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLBassBoostItf,
                                                                        pSupported:
                                                                            *mut SLboolean)
                                                       -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLBassBoostItf_() {
    assert_eq!(::std::mem::size_of::<SLBassBoostItf_>() , 40usize , concat ! (
               "Size of: " , stringify ! ( SLBassBoostItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLBassBoostItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLBassBoostItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBassBoostItf_ ) ) . SetEnabled as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBassBoostItf_ ) ,
                "::" , stringify ! ( SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBassBoostItf_ ) ) . IsEnabled as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBassBoostItf_ ) ,
                "::" , stringify ! ( IsEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBassBoostItf_ ) ) . SetStrength as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBassBoostItf_ ) ,
                "::" , stringify ! ( SetStrength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBassBoostItf_ ) ) . GetRoundedStrength
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBassBoostItf_ ) ,
                "::" , stringify ! ( GetRoundedStrength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLBassBoostItf_ ) ) . IsStrengthSupported
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLBassBoostItf_ ) ,
                "::" , stringify ! ( IsStrengthSupported ) ));
}
impl Clone for SLBassBoostItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLBassBoostItf = *const *const SLBassBoostItf_;
extern "C" {
    pub static SL_IID_PITCH: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLPitchItf_ {
    pub SetPitch: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLPitchItf,
                                                             pitch:
                                                                 SLpermille)
                                            -> SLresult>,
    pub GetPitch: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLPitchItf,
                                                             pPitch:
                                                                 *mut SLpermille)
                                            -> SLresult>,
    pub GetPitchCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLPitchItf,
                                                                         pMinPitch:
                                                                             *mut SLpermille,
                                                                         pMaxPitch:
                                                                             *mut SLpermille)
                                                        -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLPitchItf_() {
    assert_eq!(::std::mem::size_of::<SLPitchItf_>() , 24usize , concat ! (
               "Size of: " , stringify ! ( SLPitchItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLPitchItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLPitchItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPitchItf_ ) ) . SetPitch as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPitchItf_ ) , "::" ,
                stringify ! ( SetPitch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPitchItf_ ) ) . GetPitch as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPitchItf_ ) , "::" ,
                stringify ! ( GetPitch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLPitchItf_ ) ) . GetPitchCapabilities as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLPitchItf_ ) , "::" ,
                stringify ! ( GetPitchCapabilities ) ));
}
impl Clone for SLPitchItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLPitchItf = *const *const SLPitchItf_;
extern "C" {
    pub static SL_IID_RATEPITCH: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLRatePitchItf_ {
    pub SetRate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLRatePitchItf,
                                                            rate: SLpermille)
                                           -> SLresult>,
    pub GetRate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLRatePitchItf,
                                                            pRate:
                                                                *mut SLpermille)
                                           -> SLresult>,
    pub GetRatePitchCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 SLRatePitchItf,
                                                                             pMinRate:
                                                                                 *mut SLpermille,
                                                                             pMaxRate:
                                                                                 *mut SLpermille)
                                                            -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLRatePitchItf_() {
    assert_eq!(::std::mem::size_of::<SLRatePitchItf_>() , 24usize , concat ! (
               "Size of: " , stringify ! ( SLRatePitchItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLRatePitchItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLRatePitchItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRatePitchItf_ ) ) . SetRate as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRatePitchItf_ ) ,
                "::" , stringify ! ( SetRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRatePitchItf_ ) ) . GetRate as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLRatePitchItf_ ) ,
                "::" , stringify ! ( GetRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLRatePitchItf_ ) ) .
                GetRatePitchCapabilities as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLRatePitchItf_ ) ,
                "::" , stringify ! ( GetRatePitchCapabilities ) ));
}
impl Clone for SLRatePitchItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLRatePitchItf = *const *const SLRatePitchItf_;
extern "C" {
    pub static SL_IID_VIRTUALIZER: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLVirtualizerItf_ {
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLVirtualizerItf,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLVirtualizerItf,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
    pub SetStrength: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLVirtualizerItf,
                                                                strength:
                                                                    SLpermille)
                                               -> SLresult>,
    pub GetRoundedStrength: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           SLVirtualizerItf,
                                                                       pStrength:
                                                                           *mut SLpermille)
                                                      -> SLresult>,
    pub IsStrengthSupported: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLVirtualizerItf,
                                                                        pSupported:
                                                                            *mut SLboolean)
                                                       -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLVirtualizerItf_() {
    assert_eq!(::std::mem::size_of::<SLVirtualizerItf_>() , 40usize , concat !
               ( "Size of: " , stringify ! ( SLVirtualizerItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLVirtualizerItf_>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( SLVirtualizerItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVirtualizerItf_ ) ) . SetEnabled as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVirtualizerItf_ ) ,
                "::" , stringify ! ( SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVirtualizerItf_ ) ) . IsEnabled as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVirtualizerItf_ ) ,
                "::" , stringify ! ( IsEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVirtualizerItf_ ) ) . SetStrength as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVirtualizerItf_ ) ,
                "::" , stringify ! ( SetStrength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVirtualizerItf_ ) ) .
                GetRoundedStrength as * const _ as usize } , 24usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLVirtualizerItf_ ) ,
                "::" , stringify ! ( GetRoundedStrength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVirtualizerItf_ ) ) .
                IsStrengthSupported as * const _ as usize } , 32usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLVirtualizerItf_ ) ,
                "::" , stringify ! ( IsStrengthSupported ) ));
}
impl Clone for SLVirtualizerItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLVirtualizerItf = *const *const SLVirtualizerItf_;
extern "C" {
    pub static SL_IID_VISUALIZATION: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLVisualizationItf_ {
    pub RegisterVisualizationCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      SLVisualizationItf,
                                                                                  callback:
                                                                                      slVisualizationCallback,
                                                                                  pContext:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  rate:
                                                                                      SLmilliHertz)
                                                                 -> SLresult>,
    pub GetMaxRate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLVisualizationItf,
                                                               pRate:
                                                                   *mut SLmilliHertz)
                                              -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLVisualizationItf_() {
    assert_eq!(::std::mem::size_of::<SLVisualizationItf_>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( SLVisualizationItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLVisualizationItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLVisualizationItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVisualizationItf_ ) ) .
                RegisterVisualizationCallback as * const _ as usize } , 0usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLVisualizationItf_ ) ,
                "::" , stringify ! ( RegisterVisualizationCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLVisualizationItf_ ) ) . GetMaxRate as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLVisualizationItf_ ) ,
                "::" , stringify ! ( GetMaxRate ) ));
}
impl Clone for SLVisualizationItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLVisualizationItf = *const *const SLVisualizationItf_;
pub type slVisualizationCallback =
    ::std::option::Option<unsafe extern "C" fn(pContext:
                                                   *mut ::std::os::raw::c_void,
                                               waveform: *const SLuint8,
                                               fft: *const SLuint8,
                                               samplerate: SLmilliHertz)>;
extern "C" {
    pub static SL_IID_ENGINE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEngineItf_ {
    pub CreateLEDDevice: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLEngineItf,
                                                                    pDevice:
                                                                        *mut SLObjectItf,
                                                                    deviceID:
                                                                        SLuint32,
                                                                    numInterfaces:
                                                                        SLuint32,
                                                                    pInterfaceIds:
                                                                        *const SLInterfaceID,
                                                                    pInterfaceRequired:
                                                                        *const SLboolean)
                                                   -> SLresult>,
    pub CreateVibraDevice: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLEngineItf,
                                                                      pDevice:
                                                                          *mut SLObjectItf,
                                                                      deviceID:
                                                                          SLuint32,
                                                                      numInterfaces:
                                                                          SLuint32,
                                                                      pInterfaceIds:
                                                                          *const SLInterfaceID,
                                                                      pInterfaceRequired:
                                                                          *const SLboolean)
                                                     -> SLresult>,
    pub CreateAudioPlayer: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          SLEngineItf,
                                                                      pPlayer:
                                                                          *mut SLObjectItf,
                                                                      pAudioSrc:
                                                                          *mut SLDataSource,
                                                                      pAudioSnk:
                                                                          *mut SLDataSink,
                                                                      numInterfaces:
                                                                          SLuint32,
                                                                      pInterfaceIds:
                                                                          *const SLInterfaceID,
                                                                      pInterfaceRequired:
                                                                          *const SLboolean)
                                                     -> SLresult>,
    pub CreateAudioRecorder: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLEngineItf,
                                                                        pRecorder:
                                                                            *mut SLObjectItf,
                                                                        pAudioSrc:
                                                                            *mut SLDataSource,
                                                                        pAudioSnk:
                                                                            *mut SLDataSink,
                                                                        numInterfaces:
                                                                            SLuint32,
                                                                        pInterfaceIds:
                                                                            *const SLInterfaceID,
                                                                        pInterfaceRequired:
                                                                            *const SLboolean)
                                                       -> SLresult>,
    pub CreateMidiPlayer: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLEngineItf,
                                                                     pPlayer:
                                                                         *mut SLObjectItf,
                                                                     pMIDISrc:
                                                                         *mut SLDataSource,
                                                                     pBankSrc:
                                                                         *mut SLDataSource,
                                                                     pAudioOutput:
                                                                         *mut SLDataSink,
                                                                     pVibra:
                                                                         *mut SLDataSink,
                                                                     pLEDArray:
                                                                         *mut SLDataSink,
                                                                     numInterfaces:
                                                                         SLuint32,
                                                                     pInterfaceIds:
                                                                         *const SLInterfaceID,
                                                                     pInterfaceRequired:
                                                                         *const SLboolean)
                                                    -> SLresult>,
    pub CreateListener: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLEngineItf,
                                                                   pListener:
                                                                       *mut SLObjectItf,
                                                                   numInterfaces:
                                                                       SLuint32,
                                                                   pInterfaceIds:
                                                                       *const SLInterfaceID,
                                                                   pInterfaceRequired:
                                                                       *const SLboolean)
                                                  -> SLresult>,
    pub Create3DGroup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLEngineItf,
                                                                  pGroup:
                                                                      *mut SLObjectItf,
                                                                  numInterfaces:
                                                                      SLuint32,
                                                                  pInterfaceIds:
                                                                      *const SLInterfaceID,
                                                                  pInterfaceRequired:
                                                                      *const SLboolean)
                                                 -> SLresult>,
    pub CreateOutputMix: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLEngineItf,
                                                                    pMix:
                                                                        *mut SLObjectItf,
                                                                    numInterfaces:
                                                                        SLuint32,
                                                                    pInterfaceIds:
                                                                        *const SLInterfaceID,
                                                                    pInterfaceRequired:
                                                                        *const SLboolean)
                                                   -> SLresult>,
    pub CreateMetadataExtractor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLEngineItf,
                                                                            pMetadataExtractor:
                                                                                *mut SLObjectItf,
                                                                            pDataSource:
                                                                                *mut SLDataSource,
                                                                            numInterfaces:
                                                                                SLuint32,
                                                                            pInterfaceIds:
                                                                                *const SLInterfaceID,
                                                                            pInterfaceRequired:
                                                                                *const SLboolean)
                                                           -> SLresult>,
    pub CreateExtensionObject: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLEngineItf,
                                                                          pObject:
                                                                              *mut SLObjectItf,
                                                                          pParameters:
                                                                              *mut ::std::os::raw::c_void,
                                                                          objectID:
                                                                              SLuint32,
                                                                          numInterfaces:
                                                                              SLuint32,
                                                                          pInterfaceIds:
                                                                              *const SLInterfaceID,
                                                                          pInterfaceRequired:
                                                                              *const SLboolean)
                                                         -> SLresult>,
    pub QueryNumSupportedInterfaces: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLEngineItf,
                                                                                objectID:
                                                                                    SLuint32,
                                                                                pNumSupportedInterfaces:
                                                                                    *mut SLuint32)
                                                               -> SLresult>,
    pub QuerySupportedInterfaces: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 SLEngineItf,
                                                                             objectID:
                                                                                 SLuint32,
                                                                             index:
                                                                                 SLuint32,
                                                                             pInterfaceId:
                                                                                 *mut SLInterfaceID)
                                                            -> SLresult>,
    pub QueryNumSupportedExtensions: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    SLEngineItf,
                                                                                pNumExtensions:
                                                                                    *mut SLuint32)
                                                               -> SLresult>,
    pub QuerySupportedExtension: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                SLEngineItf,
                                                                            index:
                                                                                SLuint32,
                                                                            pExtensionName:
                                                                                *mut SLchar,
                                                                            pNameLength:
                                                                                *mut SLint16)
                                                           -> SLresult>,
    pub IsExtensionSupported: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLEngineItf,
                                                                         pExtensionName:
                                                                             *const SLchar,
                                                                         pSupported:
                                                                             *mut SLboolean)
                                                        -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLEngineItf_() {
    assert_eq!(::std::mem::size_of::<SLEngineItf_>() , 120usize , concat ! (
               "Size of: " , stringify ! ( SLEngineItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLEngineItf_>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( SLEngineItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateLEDDevice as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateLEDDevice ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateVibraDevice as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateVibraDevice ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateAudioPlayer as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateAudioPlayer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateAudioRecorder as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateAudioRecorder ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateMidiPlayer as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateMidiPlayer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateListener as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateListener ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . Create3DGroup as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( Create3DGroup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateOutputMix as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateOutputMix ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) .
                CreateMetadataExtractor as * const _ as usize } , 64usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateMetadataExtractor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . CreateExtensionObject
                as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( CreateExtensionObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) .
                QueryNumSupportedInterfaces as * const _ as usize } , 80usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( QueryNumSupportedInterfaces ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) .
                QuerySupportedInterfaces as * const _ as usize } , 88usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( QuerySupportedInterfaces ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) .
                QueryNumSupportedExtensions as * const _ as usize } , 96usize
                , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( QueryNumSupportedExtensions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) .
                QuerySupportedExtension as * const _ as usize } , 104usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( QuerySupportedExtension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineItf_ ) ) . IsExtensionSupported
                as * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineItf_ ) , "::" ,
                stringify ! ( IsExtensionSupported ) ));
}
impl Clone for SLEngineItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEngineItf = *const *const SLEngineItf_;
extern "C" {
    pub static SL_IID_ENGINECAPABILITIES: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEngineCapabilitiesItf_ {
    pub QuerySupportedProfiles: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               SLEngineCapabilitiesItf,
                                                                           pProfilesSupported:
                                                                               *mut SLuint16)
                                                          -> SLresult>,
    pub QueryAvailableVoices: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLEngineCapabilitiesItf,
                                                                         voiceType:
                                                                             SLuint16,
                                                                         pNumMaxVoices:
                                                                             *mut SLint16,
                                                                         pIsAbsoluteMax:
                                                                             *mut SLboolean,
                                                                         pNumFreeVoices:
                                                                             *mut SLint16)
                                                        -> SLresult>,
    pub QueryNumberOfMIDISynthesizers: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      SLEngineCapabilitiesItf,
                                                                                  pNumMIDIsynthesizers:
                                                                                      *mut SLint16)
                                                                 -> SLresult>,
    pub QueryAPIVersion: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLEngineCapabilitiesItf,
                                                                    pMajor:
                                                                        *mut SLint16,
                                                                    pMinor:
                                                                        *mut SLint16,
                                                                    pStep:
                                                                        *mut SLint16)
                                                   -> SLresult>,
    pub QueryLEDCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLEngineCapabilitiesItf,
                                                                         pIndex:
                                                                             *mut SLuint32,
                                                                         pLEDDeviceID:
                                                                             *mut SLuint32,
                                                                         pDescriptor:
                                                                             *mut SLLEDDescriptor)
                                                        -> SLresult>,
    pub QueryVibraCapabilities: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               SLEngineCapabilitiesItf,
                                                                           pIndex:
                                                                               *mut SLuint32,
                                                                           pVibraDeviceID:
                                                                               *mut SLuint32,
                                                                           pDescriptor:
                                                                               *mut SLVibraDescriptor)
                                                          -> SLresult>,
    pub IsThreadSafe: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLEngineCapabilitiesItf,
                                                                 pIsThreadSafe:
                                                                     *mut SLboolean)
                                                -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLEngineCapabilitiesItf_() {
    assert_eq!(::std::mem::size_of::<SLEngineCapabilitiesItf_>() , 56usize ,
               concat ! (
               "Size of: " , stringify ! ( SLEngineCapabilitiesItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLEngineCapabilitiesItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLEngineCapabilitiesItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                QuerySupportedProfiles as * const _ as usize } , 0usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! (
                QuerySupportedProfiles ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                QueryAvailableVoices as * const _ as usize } , 8usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! (
                QueryAvailableVoices ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                QueryNumberOfMIDISynthesizers as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! (
                QueryNumberOfMIDISynthesizers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                QueryAPIVersion as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! (
                QueryAPIVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                QueryLEDCapabilities as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! (
                QueryLEDCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                QueryVibraCapabilities as * const _ as usize } , 40usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! (
                QueryVibraCapabilities ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineCapabilitiesItf_ ) ) .
                IsThreadSafe as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLEngineCapabilitiesItf_ ) , "::" , stringify ! ( IsThreadSafe
                ) ));
}
impl Clone for SLEngineCapabilitiesItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEngineCapabilitiesItf = *const *const SLEngineCapabilitiesItf_;
extern "C" {
    pub static SL_IID_THREADSYNC: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLThreadSyncItf_ {
    pub EnterCriticalSection: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             SLThreadSyncItf)
                                                        -> SLresult>,
    pub ExitCriticalSection: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            SLThreadSyncItf)
                                                       -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLThreadSyncItf_() {
    assert_eq!(::std::mem::size_of::<SLThreadSyncItf_>() , 16usize , concat !
               ( "Size of: " , stringify ! ( SLThreadSyncItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLThreadSyncItf_>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( SLThreadSyncItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLThreadSyncItf_ ) ) .
                EnterCriticalSection as * const _ as usize } , 0usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLThreadSyncItf_ ) ,
                "::" , stringify ! ( EnterCriticalSection ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLThreadSyncItf_ ) ) .
                ExitCriticalSection as * const _ as usize } , 8usize , concat
                ! (
                "Alignment of field: " , stringify ! ( SLThreadSyncItf_ ) ,
                "::" , stringify ! ( ExitCriticalSection ) ));
}
impl Clone for SLThreadSyncItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLThreadSyncItf = *const *const SLThreadSyncItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLEngineOption_ {
    pub feature: SLuint32,
    pub data: SLuint32,
}
#[test]
fn bindgen_test_layout_SLEngineOption_() {
    assert_eq!(::std::mem::size_of::<SLEngineOption_>() , 8usize , concat ! (
               "Size of: " , stringify ! ( SLEngineOption_ ) ));
    assert_eq! (::std::mem::align_of::<SLEngineOption_>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( SLEngineOption_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineOption_ ) ) . feature as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineOption_ ) ,
                "::" , stringify ! ( feature ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLEngineOption_ ) ) . data as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLEngineOption_ ) ,
                "::" , stringify ! ( data ) ));
}
impl Clone for SLEngineOption_ {
    fn clone(&self) -> Self { *self }
}
pub type SLEngineOption = SLEngineOption_;
extern "C" {
    pub fn slCreateEngine(pEngine: *mut SLObjectItf, numOptions: SLuint32,
                          pEngineOptions: *const SLEngineOption,
                          numInterfaces: SLuint32,
                          pInterfaceIds: *const SLInterfaceID,
                          pInterfaceRequired: *const SLboolean) -> SLresult;
}
extern "C" {
    pub fn slQueryNumSupportedEngineInterfaces(pNumSupportedInterfaces:
                                                   *mut SLuint32) -> SLresult;
}
extern "C" {
    pub fn slQuerySupportedEngineInterfaces(index: SLuint32,
                                            pInterfaceId: *mut SLInterfaceID)
     -> SLresult;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __mbstate8: __BindgenUnionField<[::std::os::raw::c_char; 128usize]>,
    pub _mbstateL: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ));
    assert_eq! (::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_pthread_handler_rec )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) .
                __routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! (
                __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next )
                ));
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_condattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutexattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque )
                ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize , concat
               ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __cleanup_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __opaque ) ));
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type jboolean = u8;
pub type jbyte = i8;
pub type jchar = u16;
pub type jshort = i16;
pub type jint = i32;
pub type jlong = i64;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
pub type jobject = *mut ::std::os::raw::c_void;
pub type jclass = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jobjectArray = jarray;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jthrowable = jobject;
pub type jweak = jobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jfieldID {
    _unused: [u8; 0],
}
pub type jfieldID = *mut _jfieldID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jmethodID {
    _unused: [u8; 0],
}
pub type jmethodID = *mut _jmethodID;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNIInvokeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JavaVM)
                                                 -> jint>,
    pub AttachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JavaVM,
                                                                        arg2:
                                                                            *mut *mut JNIEnv,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_void)
                                                       -> jint>,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JavaVM)
                                                       -> jint>,
    pub GetEnv: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JavaVM,
                                                           arg2:
                                                               *mut *mut ::std::os::raw::c_void,
                                                           arg3: jint)
                                          -> jint>,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JavaVM,
                                                                                arg2:
                                                                                    *mut *mut JNIEnv,
                                                                                arg3:
                                                                                    *mut ::std::os::raw::c_void)
                                                               -> jint>,
}
#[test]
fn bindgen_test_layout_JNIInvokeInterface() {
    assert_eq!(::std::mem::size_of::<JNIInvokeInterface>() , 64usize , concat
               ! ( "Size of: " , stringify ! ( JNIInvokeInterface ) ));
    assert_eq! (::std::mem::align_of::<JNIInvokeInterface>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( JNIInvokeInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . reserved0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( reserved0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . reserved1 as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . reserved2 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( reserved2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . DestroyJavaVM as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( DestroyJavaVM ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) .
                AttachCurrentThread as * const _ as usize } , 32usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( AttachCurrentThread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) .
                DetachCurrentThread as * const _ as usize } , 40usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( DetachCurrentThread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) . GetEnv as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( GetEnv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNIInvokeInterface ) ) .
                AttachCurrentThreadAsDaemon as * const _ as usize } , 56usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNIInvokeInterface ) ,
                "::" , stringify ! ( AttachCurrentThreadAsDaemon ) ));
}
impl Clone for JNIInvokeInterface {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct jvalue {
    pub z: __BindgenUnionField<jboolean>,
    pub b: __BindgenUnionField<jbyte>,
    pub c: __BindgenUnionField<jchar>,
    pub s: __BindgenUnionField<jshort>,
    pub i: __BindgenUnionField<jint>,
    pub j: __BindgenUnionField<jlong>,
    pub f: __BindgenUnionField<jfloat>,
    pub d: __BindgenUnionField<jdouble>,
    pub l: __BindgenUnionField<jobject>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_jvalue() {
    assert_eq!(::std::mem::size_of::<jvalue>() , 8usize , concat ! (
               "Size of: " , stringify ! ( jvalue ) ));
    assert_eq! (::std::mem::align_of::<jvalue>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( jvalue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . z as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . b as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . c as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . s as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . i as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( i ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . j as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( j ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . f as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . d as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jvalue ) ) . l as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jvalue ) , "::" ,
                stringify ! ( l ) ));
}
impl Clone for jvalue {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum jobjectRefType {
    JNIInvalidRefType = 0,
    JNILocalRefType = 1,
    JNIGlobalRefType = 2,
    JNIWeakGlobalRefType = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNINativeMethod {
    pub name: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JNINativeMethod() {
    assert_eq!(::std::mem::size_of::<JNINativeMethod>() , 24usize , concat ! (
               "Size of: " , stringify ! ( JNINativeMethod ) ));
    assert_eq! (::std::mem::align_of::<JNINativeMethod>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( JNINativeMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeMethod ) ) . name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeMethod ) ,
                "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeMethod ) ) . signature as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeMethod ) ,
                "::" , stringify ! ( signature ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeMethod ) ) . fnPtr as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeMethod ) ,
                "::" , stringify ! ( fnPtr ) ));
}
impl Clone for JNINativeMethod {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _JNIEnv {
    pub functions: *const JNINativeInterface,
}
#[test]
fn bindgen_test_layout__JNIEnv() {
    assert_eq!(::std::mem::size_of::<_JNIEnv>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _JNIEnv ) ));
    assert_eq! (::std::mem::align_of::<_JNIEnv>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _JNIEnv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JNIEnv ) ) . functions as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _JNIEnv ) , "::" ,
                stringify ! ( functions ) ));
}
impl Clone for _JNIEnv {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _JavaVM {
    pub functions: *const JNIInvokeInterface,
}
#[test]
fn bindgen_test_layout__JavaVM() {
    assert_eq!(::std::mem::size_of::<_JavaVM>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _JavaVM ) ));
    assert_eq! (::std::mem::align_of::<_JavaVM>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _JavaVM ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JavaVM ) ) . functions as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _JavaVM ) , "::" ,
                stringify ! ( functions ) ));
}
impl Clone for _JavaVM {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JNINativeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv)
                                              -> jint>,
    pub DefineClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2:
                                                                    *const ::std::os::raw::c_char,
                                                                arg3: jobject,
                                                                arg4:
                                                                    *const jbyte,
                                                                arg5: jsize)
                                               -> jclass>,
    pub FindClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *const ::std::os::raw::c_char)
                                             -> jclass>,
    pub FromReflectedMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jobject)
                                                       -> jmethodID>,
    pub FromReflectedField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject)
                                                      -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          jboolean)
                                                     -> jobject>,
    pub GetSuperclass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jclass)
                                                 -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         jclass)
                                                    -> jboolean>,
    pub ToReflectedField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         jfieldID,
                                                                     arg4:
                                                                         jboolean)
                                                    -> jobject>,
    pub Throw: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv,
                                                          arg2: jthrowable)
                                         -> jint>,
    pub ThrowNew: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut JNIEnv,
                                                             arg2: jclass,
                                                             arg3:
                                                                 *const ::std::os::raw::c_char)
                                            -> jint>,
    pub ExceptionOccurred: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv)
                                                     -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2:
                                                                   *const ::std::os::raw::c_char)>,
    pub PushLocalFrame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2: jint)
                                                  -> jint>,
    pub PopLocalFrame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject)
                                                 -> jobject>,
    pub NewGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject)
                                                -> jobject>,
    pub DeleteGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject)>,
    pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject)>,
    pub IsSameObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jobject)
                                                -> jboolean>,
    pub NewLocalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject)
                                               -> jobject>,
    pub EnsureLocalCapacity: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jint)
                                                       -> jint>,
    pub AllocObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jclass)
                                               -> jobject>,
    pub NewObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2: jclass,
                                                              arg3:
                                                                  jmethodID, ...)
                                             -> jobject>,
    pub NewObjectV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   jmethodID,
                                                               arg4:
                                                                   *mut __va_list_tag)
                                              -> jobject>,
    pub NewObjectA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   jmethodID,
                                                               arg4:
                                                                   *mut jvalue)
                                              -> jobject>,
    pub GetObjectClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject)
                                                  -> jclass>,
    pub IsInstanceOf: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3: jclass)
                                                -> jboolean>,
    pub GetMethodID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jclass,
                                                                arg3:
                                                                    *const ::std::os::raw::c_char,
                                                                arg4:
                                                                    *const ::std::os::raw::c_char)
                                               -> jmethodID>,
    pub CallObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID, ...)
                                                    -> jobject>,
    pub CallObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut __va_list_tag)
                                                     -> jobject>,
    pub CallObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut jvalue)
                                                     -> jobject>,
    pub CallBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID, ...)
                                                     -> jboolean>,
    pub CallBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject,
                                                                       arg3:
                                                                           jmethodID,
                                                                       arg4:
                                                                           *mut __va_list_tag)
                                                      -> jboolean>,
    pub CallBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject,
                                                                       arg3:
                                                                           jmethodID,
                                                                       arg4:
                                                                           *mut jvalue)
                                                      -> jboolean>,
    pub CallByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jbyte>,
    pub CallByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)
                                                   -> jbyte>,
    pub CallByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jbyte>,
    pub CallCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jchar>,
    pub CallCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)
                                                   -> jchar>,
    pub CallCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jchar>,
    pub CallShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID, ...)
                                                   -> jshort>,
    pub CallShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut __va_list_tag)
                                                    -> jshort>,
    pub CallShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut jvalue)
                                                    -> jshort>,
    pub CallIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jmethodID, ...)
                                                 -> jint>,
    pub CallIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID,
                                                                   arg4:
                                                                       *mut __va_list_tag)
                                                  -> jint>,
    pub CallIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID,
                                                                   arg4:
                                                                       *mut jvalue)
                                                  -> jint>,
    pub CallLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jlong>,
    pub CallLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)
                                                   -> jlong>,
    pub CallLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jlong>,
    pub CallFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID, ...)
                                                   -> jfloat>,
    pub CallFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut __va_list_tag)
                                                    -> jfloat>,
    pub CallFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut jvalue)
                                                    -> jfloat>,
    pub CallDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID, ...)
                                                    -> jdouble>,
    pub CallDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut __va_list_tag)
                                                     -> jdouble>,
    pub CallDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut jvalue)
                                                     -> jdouble>,
    pub CallVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)>,
    pub CallVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut __va_list_tag)>,
    pub CallVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)>,
    pub CallNonvirtualObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID, ...)
                                                              -> jobject>,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut __va_list_tag)
                                                               -> jobject>,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut jvalue)
                                                               -> jobject>,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID, ...)
                                                               -> jboolean>,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *mut JNIEnv,
                                                                                 arg2:
                                                                                     jobject,
                                                                                 arg3:
                                                                                     jclass,
                                                                                 arg4:
                                                                                     jmethodID,
                                                                                 arg5:
                                                                                     *mut __va_list_tag)
                                                                -> jboolean>,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *mut JNIEnv,
                                                                                 arg2:
                                                                                     jobject,
                                                                                 arg3:
                                                                                     jclass,
                                                                                 arg4:
                                                                                     jmethodID,
                                                                                 arg5:
                                                                                     *mut jvalue)
                                                                -> jboolean>,
    pub CallNonvirtualByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jbyte>,
    pub CallNonvirtualByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)
                                                             -> jbyte>,
    pub CallNonvirtualByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jbyte>,
    pub CallNonvirtualCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jchar>,
    pub CallNonvirtualCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)
                                                             -> jchar>,
    pub CallNonvirtualCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jchar>,
    pub CallNonvirtualShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID, ...)
                                                             -> jshort>,
    pub CallNonvirtualShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut __va_list_tag)
                                                              -> jshort>,
    pub CallNonvirtualShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut jvalue)
                                                              -> jshort>,
    pub CallNonvirtualIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jobject,
                                                                            arg3:
                                                                                jclass,
                                                                            arg4:
                                                                                jmethodID, ...)
                                                           -> jint>,
    pub CallNonvirtualIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID,
                                                                             arg5:
                                                                                 *mut __va_list_tag)
                                                            -> jint>,
    pub CallNonvirtualIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID,
                                                                             arg5:
                                                                                 *mut jvalue)
                                                            -> jint>,
    pub CallNonvirtualLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jlong>,
    pub CallNonvirtualLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)
                                                             -> jlong>,
    pub CallNonvirtualLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jlong>,
    pub CallNonvirtualFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID, ...)
                                                             -> jfloat>,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut __va_list_tag)
                                                              -> jfloat>,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut jvalue)
                                                              -> jfloat>,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID, ...)
                                                              -> jdouble>,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut __va_list_tag)
                                                               -> jdouble>,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut jvalue)
                                                               -> jdouble>,
    pub CallNonvirtualVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)>,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut __va_list_tag)>,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)>,
    pub GetFieldID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   *const ::std::os::raw::c_char,
                                                               arg4:
                                                                   *const ::std::os::raw::c_char)
                                              -> jfieldID>,
    pub GetObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID)
                                                  -> jobject>,
    pub GetBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jfieldID)
                                                   -> jboolean>,
    pub GetByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jbyte>,
    pub GetCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jchar>,
    pub GetShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID)
                                                 -> jshort>,
    pub GetIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject,
                                                                arg3:
                                                                    jfieldID)
                                               -> jint>,
    pub GetLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jlong>,
    pub GetFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID)
                                                 -> jfloat>,
    pub GetDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID)
                                                  -> jdouble>,
    pub SetObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID,
                                                                   arg4:
                                                                       jobject)>,
    pub SetBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jfieldID,
                                                                    arg4:
                                                                        jboolean)>,
    pub SetByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jbyte)>,
    pub SetCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jchar)>,
    pub SetShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID,
                                                                  arg4:
                                                                      jshort)>,
    pub SetIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject,
                                                                arg3:
                                                                    jfieldID,
                                                                arg4: jint)>,
    pub SetLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jlong)>,
    pub SetFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID,
                                                                  arg4:
                                                                      jfloat)>,
    pub SetDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID,
                                                                   arg4:
                                                                       jdouble)>,
    pub GetStaticMethodID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          *const ::std::os::raw::c_char,
                                                                      arg4:
                                                                          *const ::std::os::raw::c_char)
                                                     -> jmethodID>,
    pub CallStaticObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID, ...)
                                                          -> jobject>,
    pub CallStaticObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut __va_list_tag)
                                                           -> jobject>,
    pub CallStaticObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut jvalue)
                                                           -> jobject>,
    pub CallStaticBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID, ...)
                                                           -> jboolean>,
    pub CallStaticBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jclass,
                                                                             arg3:
                                                                                 jmethodID,
                                                                             arg4:
                                                                                 *mut __va_list_tag)
                                                            -> jboolean>,
    pub CallStaticBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jclass,
                                                                             arg3:
                                                                                 jmethodID,
                                                                             arg4:
                                                                                 *mut jvalue)
                                                            -> jboolean>,
    pub CallStaticByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jbyte>,
    pub CallStaticByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)
                                                         -> jbyte>,
    pub CallStaticByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jbyte>,
    pub CallStaticCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jchar>,
    pub CallStaticCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)
                                                         -> jchar>,
    pub CallStaticCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jchar>,
    pub CallStaticShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID, ...)
                                                         -> jshort>,
    pub CallStaticShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut __va_list_tag)
                                                          -> jshort>,
    pub CallStaticShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut jvalue)
                                                          -> jshort>,
    pub CallStaticIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jmethodID, ...)
                                                       -> jint>,
    pub CallStaticIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID,
                                                                         arg4:
                                                                             *mut __va_list_tag)
                                                        -> jint>,
    pub CallStaticIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID,
                                                                         arg4:
                                                                             *mut jvalue)
                                                        -> jint>,
    pub CallStaticLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jlong>,
    pub CallStaticLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)
                                                         -> jlong>,
    pub CallStaticLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jlong>,
    pub CallStaticFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID, ...)
                                                         -> jfloat>,
    pub CallStaticFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut __va_list_tag)
                                                          -> jfloat>,
    pub CallStaticFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut jvalue)
                                                          -> jfloat>,
    pub CallStaticDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID, ...)
                                                          -> jdouble>,
    pub CallStaticDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut __va_list_tag)
                                                           -> jdouble>,
    pub CallStaticDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut jvalue)
                                                           -> jdouble>,
    pub CallStaticVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)>,
    pub CallStaticVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut __va_list_tag)>,
    pub CallStaticVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)>,
    pub GetStaticFieldID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         *const ::std::os::raw::c_char,
                                                                     arg4:
                                                                         *const ::std::os::raw::c_char)
                                                    -> jfieldID>,
    pub GetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID)
                                                        -> jobject>,
    pub GetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jfieldID)
                                                         -> jboolean>,
    pub GetStaticByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jbyte>,
    pub GetStaticCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jchar>,
    pub GetStaticShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID)
                                                       -> jshort>,
    pub GetStaticIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jfieldID)
                                                     -> jint>,
    pub GetStaticLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jlong>,
    pub GetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID)
                                                       -> jfloat>,
    pub GetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID)
                                                        -> jdouble>,
    pub SetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID,
                                                                         arg4:
                                                                             jobject)>,
    pub SetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jfieldID,
                                                                          arg4:
                                                                              jboolean)>,
    pub SetStaticByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jbyte)>,
    pub SetStaticCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jchar)>,
    pub SetStaticShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID,
                                                                        arg4:
                                                                            jshort)>,
    pub SetStaticIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jfieldID,
                                                                      arg4:
                                                                          jint)>,
    pub SetStaticLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jlong)>,
    pub SetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID,
                                                                        arg4:
                                                                            jfloat)>,
    pub SetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID,
                                                                         arg4:
                                                                             jdouble)>,
    pub NewString: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *const jchar,
                                                              arg3: jsize)
                                             -> jstring>,
    pub GetStringLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jstring)
                                                   -> jsize>,
    pub GetStringChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jstring,
                                                                   arg3:
                                                                       *mut jboolean)
                                                  -> *const jchar>,
    pub ReleaseStringChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring,
                                                                       arg3:
                                                                           *const jchar)>,
    pub NewStringUTF: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_char)
                                                -> jstring>,
    pub GetStringUTFLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring)
                                                      -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jstring,
                                                                      arg3:
                                                                          *mut jboolean)
                                                     ->
                                                         *const ::std::os::raw::c_char>,
    pub ReleaseStringUTFChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jstring,
                                                                          arg3:
                                                                              *const ::std::os::raw::c_char)>,
    pub GetArrayLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jarray)
                                                  -> jsize>,
    pub NewObjectArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jsize,
                                                                   arg3:
                                                                       jclass,
                                                                   arg4:
                                                                       jobject)
                                                  -> jobjectArray>,
    pub GetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jobjectArray,
                                                                          arg3:
                                                                              jsize)
                                                         -> jobject>,
    pub SetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jobjectArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jobject)>,
    pub NewBooleanArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jsize)
                                                   -> jbooleanArray>,
    pub NewByteArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jbyteArray>,
    pub NewCharArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jcharArray>,
    pub NewShortArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2: jsize)
                                                 -> jshortArray>,
    pub NewIntArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jsize)
                                               -> jintArray>,
    pub NewLongArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jlongArray>,
    pub NewFloatArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2: jsize)
                                                 -> jfloatArray>,
    pub NewDoubleArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jsize)
                                                  -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jbooleanArray,
                                                                            arg3:
                                                                                *mut jboolean)
                                                           -> *mut jboolean>,
    pub GetByteArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jbyteArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jbyte>,
    pub GetCharArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jcharArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jchar>,
    pub GetShortArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jshortArray,
                                                                          arg3:
                                                                              *mut jboolean)
                                                         -> *mut jshort>,
    pub GetIntArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jintArray,
                                                                        arg3:
                                                                            *mut jboolean)
                                                       -> *mut jint>,
    pub GetLongArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jlongArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jlong>,
    pub GetFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jfloatArray,
                                                                          arg3:
                                                                              *mut jboolean)
                                                         -> *mut jfloat>,
    pub GetDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jdoubleArray,
                                                                           arg3:
                                                                               *mut jboolean)
                                                          -> *mut jdouble>,
    pub ReleaseBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jbooleanArray,
                                                                                arg3:
                                                                                    *mut jboolean,
                                                                                arg4:
                                                                                    jint)>,
    pub ReleaseByteArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jbyteArray,
                                                                             arg3:
                                                                                 *mut jbyte,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseCharArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jcharArray,
                                                                             arg3:
                                                                                 *mut jchar,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseShortArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jshortArray,
                                                                              arg3:
                                                                                  *mut jshort,
                                                                              arg4:
                                                                                  jint)>,
    pub ReleaseIntArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jintArray,
                                                                            arg3:
                                                                                *mut jint,
                                                                            arg4:
                                                                                jint)>,
    pub ReleaseLongArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jlongArray,
                                                                             arg3:
                                                                                 *mut jlong,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jfloatArray,
                                                                              arg3:
                                                                                  *mut jfloat,
                                                                              arg4:
                                                                                  jint)>,
    pub ReleaseDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jdoubleArray,
                                                                               arg3:
                                                                                   *mut jdouble,
                                                                               arg4:
                                                                                   jint)>,
    pub GetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jbooleanArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jsize,
                                                                          arg5:
                                                                              *mut jboolean)>,
    pub GetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jbyteArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jbyte)>,
    pub GetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jcharArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jchar)>,
    pub GetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jshortArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *mut jshort)>,
    pub GetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jintArray,
                                                                      arg3:
                                                                          jsize,
                                                                      arg4:
                                                                          jsize,
                                                                      arg5:
                                                                          *mut jint)>,
    pub GetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jlongArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jlong)>,
    pub GetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jfloatArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *mut jfloat)>,
    pub GetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jdoubleArray,
                                                                         arg3:
                                                                             jsize,
                                                                         arg4:
                                                                             jsize,
                                                                         arg5:
                                                                             *mut jdouble)>,
    pub SetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jbooleanArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jsize,
                                                                          arg5:
                                                                              *const jboolean)>,
    pub SetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jbyteArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jbyte)>,
    pub SetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jcharArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jchar)>,
    pub SetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jshortArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *const jshort)>,
    pub SetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jintArray,
                                                                      arg3:
                                                                          jsize,
                                                                      arg4:
                                                                          jsize,
                                                                      arg5:
                                                                          *const jint)>,
    pub SetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jlongArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jlong)>,
    pub SetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jfloatArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *const jfloat)>,
    pub SetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jdoubleArray,
                                                                         arg3:
                                                                             jsize,
                                                                         arg4:
                                                                             jsize,
                                                                         arg5:
                                                                             *const jdouble)>,
    pub RegisterNatives: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jclass,
                                                                    arg3:
                                                                        *const JNINativeMethod,
                                                                    arg4:
                                                                        jint)
                                                   -> jint>,
    pub UnregisterNatives: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass)
                                                     -> jint>,
    pub MonitorEnter: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject)
                                                -> jint>,
    pub MonitorExit: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject)
                                               -> jint>,
    pub GetJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *mut *mut JavaVM)
                                             -> jint>,
    pub GetStringRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jstring,
                                                                    arg3:
                                                                        jsize,
                                                                    arg4:
                                                                        jsize,
                                                                    arg5:
                                                                        *mut jchar)>,
    pub GetStringUTFRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut ::std::os::raw::c_char)>,
    pub GetPrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jarray,
                                                                              arg3:
                                                                                  *mut jboolean)
                                                             ->
                                                                 *mut ::std::os::raw::c_void>,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut JNIEnv,
                                                                                  arg2:
                                                                                      jarray,
                                                                                  arg3:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  arg4:
                                                                                      jint)>,
    pub GetStringCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jstring,
                                                                      arg3:
                                                                          *mut jboolean)
                                                     -> *const jchar>,
    pub ReleaseStringCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jstring,
                                                                          arg3:
                                                                              *const jchar)>,
    pub NewWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject)
                                                    -> jweak>,
    pub DeleteWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv)
                                                  -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            *mut ::std::os::raw::c_void,
                                                                        arg3:
                                                                            jlong)
                                                       -> jobject>,
    pub GetDirectBufferAddress: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jobject)
                                                          ->
                                                              *mut ::std::os::raw::c_void>,
    pub GetDirectBufferCapacity: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jobject)
                                                           -> jlong>,
    pub GetObjectRefType: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject)
                                                    -> jobjectRefType>,
}
#[test]
fn bindgen_test_layout_JNINativeInterface() {
    assert_eq!(::std::mem::size_of::<JNINativeInterface>() , 1864usize ,
               concat ! ( "Size of: " , stringify ! ( JNINativeInterface ) ));
    assert_eq! (::std::mem::align_of::<JNINativeInterface>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( JNINativeInterface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved1 as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved2 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . reserved3 as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( reserved3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetVersion as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . DefineClass as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DefineClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . FindClass as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FindClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                FromReflectedMethod as * const _ as usize } , 56usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FromReflectedMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                FromReflectedField as * const _ as usize } , 64usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FromReflectedField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ToReflectedMethod as * const _ as usize } , 72usize , concat !
                (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ToReflectedMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetSuperclass as
                * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetSuperclass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . IsAssignableFrom
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( IsAssignableFrom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ToReflectedField
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ToReflectedField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . Throw as * const
                _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( Throw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ThrowNew as *
                const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ThrowNew ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ExceptionOccurred as * const _ as usize } , 120usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionOccurred ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ExceptionDescribe as * const _ as usize } , 128usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionDescribe ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ExceptionClear
                as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionClear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . FatalError as *
                const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( FatalError ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . PushLocalFrame
                as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( PushLocalFrame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . PopLocalFrame as
                * const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( PopLocalFrame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewGlobalRef as
                * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . DeleteGlobalRef
                as * const _ as usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DeleteGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . DeleteLocalRef
                as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DeleteLocalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . IsSameObject as
                * const _ as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( IsSameObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewLocalRef as *
                const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewLocalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                EnsureLocalCapacity as * const _ as usize } , 208usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( EnsureLocalCapacity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . AllocObject as *
                const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( AllocObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObject as *
                const _ as usize } , 224usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObject ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObjectV as *
                const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObjectV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObjectA as *
                const _ as usize } , 240usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObjectA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetObjectClass
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . IsInstanceOf as
                * const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( IsInstanceOf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetMethodID as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetMethodID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallObjectMethod
                as * const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallObjectMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallObjectMethodV as * const _ as usize } , 280usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallObjectMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallObjectMethodA as * const _ as usize } , 288usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallObjectMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallBooleanMethod as * const _ as usize } , 296usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallBooleanMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallBooleanMethodV as * const _ as usize } , 304usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallBooleanMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallBooleanMethodA as * const _ as usize } , 312usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallBooleanMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallByteMethod
                as * const _ as usize } , 320usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallByteMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallByteMethodV
                as * const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallByteMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallByteMethodA
                as * const _ as usize } , 336usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallByteMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallCharMethod
                as * const _ as usize } , 344usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallCharMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallCharMethodV
                as * const _ as usize } , 352usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallCharMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallCharMethodA
                as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallCharMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallShortMethod
                as * const _ as usize } , 368usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallShortMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallShortMethodV
                as * const _ as usize } , 376usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallShortMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallShortMethodA
                as * const _ as usize } , 384usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallShortMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallIntMethod as
                * const _ as usize } , 392usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallIntMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallIntMethodV
                as * const _ as usize } , 400usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallIntMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallIntMethodA
                as * const _ as usize } , 408usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallIntMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallLongMethod
                as * const _ as usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallLongMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallLongMethodV
                as * const _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallLongMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallLongMethodA
                as * const _ as usize } , 432usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallLongMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallFloatMethod
                as * const _ as usize } , 440usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallFloatMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallFloatMethodV
                as * const _ as usize } , 448usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallFloatMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallFloatMethodA
                as * const _ as usize } , 456usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallFloatMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallDoubleMethod
                as * const _ as usize } , 464usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallDoubleMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallDoubleMethodV as * const _ as usize } , 472usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallDoubleMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallDoubleMethodA as * const _ as usize } , 480usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallDoubleMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallVoidMethod
                as * const _ as usize } , 488usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallVoidMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallVoidMethodV
                as * const _ as usize } , 496usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallVoidMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . CallVoidMethodA
                as * const _ as usize } , 504usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallVoidMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualObjectMethod as * const _ as usize } , 512usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualObjectMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualObjectMethodV as * const _ as usize } , 520usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualObjectMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualObjectMethodA as * const _ as usize } , 528usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualObjectMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualBooleanMethod as * const _ as usize } , 536usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualBooleanMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualBooleanMethodV as * const _ as usize } ,
                544usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualBooleanMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualBooleanMethodA as * const _ as usize } ,
                552usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualBooleanMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualByteMethod as * const _ as usize } , 560usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualByteMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualByteMethodV as * const _ as usize } , 568usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualByteMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualByteMethodA as * const _ as usize } , 576usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualByteMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualCharMethod as * const _ as usize } , 584usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualCharMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualCharMethodV as * const _ as usize } , 592usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualCharMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualCharMethodA as * const _ as usize } , 600usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualCharMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualShortMethod as * const _ as usize } , 608usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualShortMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualShortMethodV as * const _ as usize } , 616usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualShortMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualShortMethodA as * const _ as usize } , 624usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualShortMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualIntMethod as * const _ as usize } , 632usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualIntMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualIntMethodV as * const _ as usize } , 640usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualIntMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualIntMethodA as * const _ as usize } , 648usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualIntMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualLongMethod as * const _ as usize } , 656usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualLongMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualLongMethodV as * const _ as usize } , 664usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualLongMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualLongMethodA as * const _ as usize } , 672usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualLongMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualFloatMethod as * const _ as usize } , 680usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualFloatMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualFloatMethodV as * const _ as usize } , 688usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualFloatMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualFloatMethodA as * const _ as usize } , 696usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualFloatMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualDoubleMethod as * const _ as usize } , 704usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualDoubleMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualDoubleMethodV as * const _ as usize } , 712usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualDoubleMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualDoubleMethodA as * const _ as usize } , 720usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualDoubleMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualVoidMethod as * const _ as usize } , 728usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualVoidMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualVoidMethodV as * const _ as usize } , 736usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualVoidMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallNonvirtualVoidMethodA as * const _ as usize } , 744usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallNonvirtualVoidMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetFieldID as *
                const _ as usize } , 752usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFieldID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetObjectField
                as * const _ as usize } , 760usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetBooleanField
                as * const _ as usize } , 768usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetByteField as
                * const _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetCharField as
                * const _ as usize } , 784usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetShortField as
                * const _ as usize } , 792usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetIntField as *
                const _ as usize } , 800usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetLongField as
                * const _ as usize } , 808usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetFloatField as
                * const _ as usize } , 816usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetDoubleField
                as * const _ as usize } , 824usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetObjectField
                as * const _ as usize } , 832usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetBooleanField
                as * const _ as usize } , 840usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetByteField as
                * const _ as usize } , 848usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetCharField as
                * const _ as usize } , 856usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetShortField as
                * const _ as usize } , 864usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetIntField as *
                const _ as usize } , 872usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetLongField as
                * const _ as usize } , 880usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetFloatField as
                * const _ as usize } , 888usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . SetDoubleField
                as * const _ as usize } , 896usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticMethodID as * const _ as usize } , 904usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticMethodID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticObjectMethod as * const _ as usize } , 912usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticObjectMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticObjectMethodV as * const _ as usize } , 920usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticObjectMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticObjectMethodA as * const _ as usize } , 928usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticObjectMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticBooleanMethod as * const _ as usize } , 936usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticBooleanMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticBooleanMethodV as * const _ as usize } , 944usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticBooleanMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticBooleanMethodA as * const _ as usize } , 952usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticBooleanMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticByteMethod as * const _ as usize } , 960usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticByteMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticByteMethodV as * const _ as usize } , 968usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticByteMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticByteMethodA as * const _ as usize } , 976usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticByteMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticCharMethod as * const _ as usize } , 984usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticCharMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticCharMethodV as * const _ as usize } , 992usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticCharMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticCharMethodA as * const _ as usize } , 1000usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticCharMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticShortMethod as * const _ as usize } , 1008usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticShortMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticShortMethodV as * const _ as usize } , 1016usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticShortMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticShortMethodA as * const _ as usize } , 1024usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticShortMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticIntMethod as * const _ as usize } , 1032usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticIntMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticIntMethodV as * const _ as usize } , 1040usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticIntMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticIntMethodA as * const _ as usize } , 1048usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticIntMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticLongMethod as * const _ as usize } , 1056usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticLongMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticLongMethodV as * const _ as usize } , 1064usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticLongMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticLongMethodA as * const _ as usize } , 1072usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticLongMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticFloatMethod as * const _ as usize } , 1080usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticFloatMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticFloatMethodV as * const _ as usize } , 1088usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticFloatMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticFloatMethodA as * const _ as usize } , 1096usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticFloatMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticDoubleMethod as * const _ as usize } , 1104usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticDoubleMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticDoubleMethodV as * const _ as usize } , 1112usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticDoubleMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticDoubleMethodA as * const _ as usize } , 1120usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticDoubleMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticVoidMethod as * const _ as usize } , 1128usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticVoidMethod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticVoidMethodV as * const _ as usize } , 1136usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticVoidMethodV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                CallStaticVoidMethodA as * const _ as usize } , 1144usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( CallStaticVoidMethodA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStaticFieldID
                as * const _ as usize } , 1152usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticFieldID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticObjectField as * const _ as usize } , 1160usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticBooleanField as * const _ as usize } , 1168usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticByteField as * const _ as usize } , 1176usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticCharField as * const _ as usize } , 1184usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticShortField as * const _ as usize } , 1192usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticIntField as * const _ as usize } , 1200usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticLongField as * const _ as usize } , 1208usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticFloatField as * const _ as usize } , 1216usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStaticDoubleField as * const _ as usize } , 1224usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStaticDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticObjectField as * const _ as usize } , 1232usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticObjectField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticBooleanField as * const _ as usize } , 1240usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticBooleanField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticByteField as * const _ as usize } , 1248usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticByteField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticCharField as * const _ as usize } , 1256usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticCharField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticShortField as * const _ as usize } , 1264usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticShortField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticIntField as * const _ as usize } , 1272usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticIntField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticLongField as * const _ as usize } , 1280usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticLongField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticFloatField as * const _ as usize } , 1288usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticFloatField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetStaticDoubleField as * const _ as usize } , 1296usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetStaticDoubleField ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewString as *
                const _ as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewString ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStringLength
                as * const _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringLength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStringChars
                as * const _ as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseStringChars as * const _ as usize } , 1328usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseStringChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewStringUTF as
                * const _ as usize } , 1336usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewStringUTF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringUTFLength as * const _ as usize } , 1344usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringUTFLength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringUTFChars as * const _ as usize } , 1352usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringUTFChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseStringUTFChars as * const _ as usize } , 1360usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseStringUTFChars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetArrayLength
                as * const _ as usize } , 1368usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetArrayLength ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewObjectArray
                as * const _ as usize } , 1376usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewObjectArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetObjectArrayElement as * const _ as usize } , 1384usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectArrayElement ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetObjectArrayElement as * const _ as usize } , 1392usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetObjectArrayElement ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewBooleanArray
                as * const _ as usize } , 1400usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewBooleanArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewByteArray as
                * const _ as usize } , 1408usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewByteArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewCharArray as
                * const _ as usize } , 1416usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewCharArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewShortArray as
                * const _ as usize } , 1424usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewShortArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewIntArray as *
                const _ as usize } , 1432usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewIntArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewLongArray as
                * const _ as usize } , 1440usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewLongArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewFloatArray as
                * const _ as usize } , 1448usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewFloatArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewDoubleArray
                as * const _ as usize } , 1456usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewDoubleArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetBooleanArrayElements as * const _ as usize } , 1464usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetBooleanArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetByteArrayElements as * const _ as usize } , 1472usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetByteArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetCharArrayElements as * const _ as usize } , 1480usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetCharArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetShortArrayElements as * const _ as usize } , 1488usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetShortArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetIntArrayElements as * const _ as usize } , 1496usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetIntArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetLongArrayElements as * const _ as usize } , 1504usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetLongArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetFloatArrayElements as * const _ as usize } , 1512usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFloatArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDoubleArrayElements as * const _ as usize } , 1520usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDoubleArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseBooleanArrayElements as * const _ as usize } ,
                1528usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseBooleanArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseByteArrayElements as * const _ as usize } , 1536usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseByteArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseCharArrayElements as * const _ as usize } , 1544usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseCharArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseShortArrayElements as * const _ as usize } , 1552usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseShortArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseIntArrayElements as * const _ as usize } , 1560usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseIntArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseLongArrayElements as * const _ as usize } , 1568usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseLongArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseFloatArrayElements as * const _ as usize } , 1576usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseFloatArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseDoubleArrayElements as * const _ as usize } , 1584usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseDoubleArrayElements ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetBooleanArrayRegion as * const _ as usize } , 1592usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetBooleanArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetByteArrayRegion as * const _ as usize } , 1600usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetByteArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetCharArrayRegion as * const _ as usize } , 1608usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetCharArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetShortArrayRegion as * const _ as usize } , 1616usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetShortArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetIntArrayRegion as * const _ as usize } , 1624usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetIntArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetLongArrayRegion as * const _ as usize } , 1632usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetLongArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetFloatArrayRegion as * const _ as usize } , 1640usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetFloatArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDoubleArrayRegion as * const _ as usize } , 1648usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDoubleArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetBooleanArrayRegion as * const _ as usize } , 1656usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetBooleanArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetByteArrayRegion as * const _ as usize } , 1664usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetByteArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetCharArrayRegion as * const _ as usize } , 1672usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetCharArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetShortArrayRegion as * const _ as usize } , 1680usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetShortArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetIntArrayRegion as * const _ as usize } , 1688usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetIntArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetLongArrayRegion as * const _ as usize } , 1696usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetLongArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetFloatArrayRegion as * const _ as usize } , 1704usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetFloatArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                SetDoubleArrayRegion as * const _ as usize } , 1712usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( SetDoubleArrayRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . RegisterNatives
                as * const _ as usize } , 1720usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( RegisterNatives ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                UnregisterNatives as * const _ as usize } , 1728usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( UnregisterNatives ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . MonitorEnter as
                * const _ as usize } , 1736usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( MonitorEnter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . MonitorExit as *
                const _ as usize } , 1744usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( MonitorExit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetJavaVM as *
                const _ as usize } , 1752usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetJavaVM ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetStringRegion
                as * const _ as usize } , 1760usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringUTFRegion as * const _ as usize } , 1768usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringUTFRegion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetPrimitiveArrayCritical as * const _ as usize } , 1776usize
                , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetPrimitiveArrayCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleasePrimitiveArrayCritical as * const _ as usize } ,
                1784usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleasePrimitiveArrayCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetStringCritical as * const _ as usize } , 1792usize , concat
                ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetStringCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                ReleaseStringCritical as * const _ as usize } , 1800usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ReleaseStringCritical ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . NewWeakGlobalRef
                as * const _ as usize } , 1808usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewWeakGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                DeleteWeakGlobalRef as * const _ as usize } , 1816usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( DeleteWeakGlobalRef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . ExceptionCheck
                as * const _ as usize } , 1824usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( ExceptionCheck ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                NewDirectByteBuffer as * const _ as usize } , 1832usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( NewDirectByteBuffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDirectBufferAddress as * const _ as usize } , 1840usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDirectBufferAddress ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) .
                GetDirectBufferCapacity as * const _ as usize } , 1848usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetDirectBufferCapacity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JNINativeInterface ) ) . GetObjectRefType
                as * const _ as usize } , 1856usize , concat ! (
                "Alignment of field: " , stringify ! ( JNINativeInterface ) ,
                "::" , stringify ! ( GetObjectRefType ) ));
}
impl Clone for JNINativeInterface {
    fn clone(&self) -> Self { *self }
}
pub type C_JNIEnv = *const JNINativeInterface;
pub type JNIEnv = *const JNINativeInterface;
pub type JavaVM = *const JNIInvokeInterface;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JavaVMAttachArgs {
    pub version: jint,
    pub name: *const ::std::os::raw::c_char,
    pub group: jobject,
}
#[test]
fn bindgen_test_layout_JavaVMAttachArgs() {
    assert_eq!(::std::mem::size_of::<JavaVMAttachArgs>() , 24usize , concat !
               ( "Size of: " , stringify ! ( JavaVMAttachArgs ) ));
    assert_eq! (::std::mem::align_of::<JavaVMAttachArgs>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( JavaVMAttachArgs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMAttachArgs ) ) . version as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMAttachArgs ) ,
                "::" , stringify ! ( version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMAttachArgs ) ) . name as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMAttachArgs ) ,
                "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMAttachArgs ) ) . group as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMAttachArgs ) ,
                "::" , stringify ! ( group ) ));
}
impl Clone for JavaVMAttachArgs {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JavaVMOption {
    pub optionString: *const ::std::os::raw::c_char,
    pub extraInfo: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JavaVMOption() {
    assert_eq!(::std::mem::size_of::<JavaVMOption>() , 16usize , concat ! (
               "Size of: " , stringify ! ( JavaVMOption ) ));
    assert_eq! (::std::mem::align_of::<JavaVMOption>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( JavaVMOption ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMOption ) ) . optionString as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMOption ) , "::" ,
                stringify ! ( optionString ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMOption ) ) . extraInfo as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMOption ) , "::" ,
                stringify ! ( extraInfo ) ));
}
impl Clone for JavaVMOption {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
}
#[test]
fn bindgen_test_layout_JavaVMInitArgs() {
    assert_eq!(::std::mem::size_of::<JavaVMInitArgs>() , 24usize , concat ! (
               "Size of: " , stringify ! ( JavaVMInitArgs ) ));
    assert_eq! (::std::mem::align_of::<JavaVMInitArgs>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( JavaVMInitArgs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMInitArgs ) ) . version as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMInitArgs ) , "::"
                , stringify ! ( version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMInitArgs ) ) . nOptions as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMInitArgs ) , "::"
                , stringify ! ( nOptions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMInitArgs ) ) . options as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMInitArgs ) , "::"
                , stringify ! ( options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const JavaVMInitArgs ) ) . ignoreUnrecognized
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( JavaVMInitArgs ) , "::"
                , stringify ! ( ignoreUnrecognized ) ));
}
impl Clone for JavaVMInitArgs {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn JNI_GetDefaultJavaVMInitArgs(arg1: *mut ::std::os::raw::c_void)
     -> jint;
}
extern "C" {
    pub fn JNI_CreateJavaVM(arg1: *mut *mut JavaVM, arg2: *mut *mut JNIEnv,
                            arg3: *mut ::std::os::raw::c_void) -> jint;
}
extern "C" {
    pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize,
                                 arg3: *mut jsize) -> jint;
}
extern "C" {
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void)
     -> jint;
}
extern "C" {
    pub fn JNI_OnUnload(vm: *mut JavaVM,
                        reserved: *mut ::std::os::raw::c_void);
}
pub type SLAint64 = sl_int64_t;
pub type SLAuint64 = sl_uint64_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidDataFormat_PCM_EX_ {
    pub formatType: SLuint32,
    pub numChannels: SLuint32,
    pub sampleRate: SLuint32,
    pub bitsPerSample: SLuint32,
    pub containerSize: SLuint32,
    pub channelMask: SLuint32,
    pub endianness: SLuint32,
    pub representation: SLuint32,
}
#[test]
fn bindgen_test_layout_SLAndroidDataFormat_PCM_EX_() {
    assert_eq!(::std::mem::size_of::<SLAndroidDataFormat_PCM_EX_>() , 32usize
               , concat ! (
               "Size of: " , stringify ! ( SLAndroidDataFormat_PCM_EX_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidDataFormat_PCM_EX_>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( SLAndroidDataFormat_PCM_EX_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                formatType as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                formatType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                numChannels as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                numChannels ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                sampleRate as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                sampleRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                bitsPerSample as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                bitsPerSample ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                containerSize as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                containerSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                channelMask as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                channelMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                endianness as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                endianness ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidDataFormat_PCM_EX_ ) ) .
                representation as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidDataFormat_PCM_EX_ ) , "::" , stringify ! (
                representation ) ));
}
impl Clone for SLAndroidDataFormat_PCM_EX_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidDataFormat_PCM_EX = SLAndroidDataFormat_PCM_EX_;
extern "C" {
    pub static SL_IID_ANDROIDEFFECT: SLInterfaceID;
}
/** Android Effect interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidEffectItf_ {
    pub CreateEffect: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLAndroidEffectItf,
                                                                 effectImplementationId:
                                                                     SLInterfaceID)
                                                -> SLresult>,
    pub ReleaseEffect: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      SLAndroidEffectItf,
                                                                  effectImplementationId:
                                                                      SLInterfaceID)
                                                 -> SLresult>,
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLAndroidEffectItf,
                                                               effectImplementationId:
                                                                   SLInterfaceID,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLAndroidEffectItf,
                                                              effectImplementationId:
                                                                  SLInterfaceID,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
    pub SendCommand: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLAndroidEffectItf,
                                                                effectImplementationId:
                                                                    SLInterfaceID,
                                                                command:
                                                                    SLuint32,
                                                                commandSize:
                                                                    SLuint32,
                                                                pCommandData:
                                                                    *mut ::std::os::raw::c_void,
                                                                replySize:
                                                                    *mut SLuint32,
                                                                pReplyData:
                                                                    *mut ::std::os::raw::c_void)
                                               -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidEffectItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidEffectItf_>() , 40usize , concat
               ! ( "Size of: " , stringify ! ( SLAndroidEffectItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidEffectItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAndroidEffectItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectItf_ ) ) . CreateEffect as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectItf_ ) ,
                "::" , stringify ! ( CreateEffect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectItf_ ) ) . ReleaseEffect
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectItf_ ) ,
                "::" , stringify ! ( ReleaseEffect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectItf_ ) ) . SetEnabled as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectItf_ ) ,
                "::" , stringify ! ( SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectItf_ ) ) . IsEnabled as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectItf_ ) ,
                "::" , stringify ! ( IsEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectItf_ ) ) . SendCommand as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectItf_ ) ,
                "::" , stringify ! ( SendCommand ) ));
}
impl Clone for SLAndroidEffectItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidEffectItf = *const *const SLAndroidEffectItf_;
extern "C" {
    pub static SL_IID_ANDROIDEFFECTSEND: SLInterfaceID;
}
/** Android Effect Send interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidEffectSendItf_ {
    pub EnableEffectSend: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidEffectSendItf,
                                                                     effectImplementationId:
                                                                         SLInterfaceID,
                                                                     enable:
                                                                         SLboolean,
                                                                     initialLevel:
                                                                         SLmillibel)
                                                    -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLAndroidEffectSendItf,
                                                              effectImplementationId:
                                                                  SLInterfaceID,
                                                              pEnable:
                                                                  *mut SLboolean)
                                             -> SLresult>,
    pub SetDirectLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLAndroidEffectSendItf,
                                                                   directLevel:
                                                                       SLmillibel)
                                                  -> SLresult>,
    pub GetDirectLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       SLAndroidEffectSendItf,
                                                                   pDirectLevel:
                                                                       *mut SLmillibel)
                                                  -> SLresult>,
    pub SetSendLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLAndroidEffectSendItf,
                                                                 effectImplementationId:
                                                                     SLInterfaceID,
                                                                 sendLevel:
                                                                     SLmillibel)
                                                -> SLresult>,
    pub GetSendLevel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     SLAndroidEffectSendItf,
                                                                 effectImplementationId:
                                                                     SLInterfaceID,
                                                                 pSendLevel:
                                                                     *mut SLmillibel)
                                                -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidEffectSendItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidEffectSendItf_>() , 48usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAndroidEffectSendItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidEffectSendItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAndroidEffectSendItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectSendItf_ ) ) .
                EnableEffectSend as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectSendItf_
                ) , "::" , stringify ! ( EnableEffectSend ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectSendItf_ ) ) . IsEnabled
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectSendItf_
                ) , "::" , stringify ! ( IsEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectSendItf_ ) ) .
                SetDirectLevel as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectSendItf_
                ) , "::" , stringify ! ( SetDirectLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectSendItf_ ) ) .
                GetDirectLevel as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectSendItf_
                ) , "::" , stringify ! ( GetDirectLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectSendItf_ ) ) .
                SetSendLevel as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectSendItf_
                ) , "::" , stringify ! ( SetSendLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectSendItf_ ) ) .
                GetSendLevel as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidEffectSendItf_
                ) , "::" , stringify ! ( GetSendLevel ) ));
}
impl Clone for SLAndroidEffectSendItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidEffectSendItf = *const *const SLAndroidEffectSendItf_;
extern "C" {
    pub static SL_IID_ANDROIDEFFECTCAPABILITIES: SLInterfaceID;
}
/** Android Effect Capabilities interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidEffectCapabilitiesItf_ {
    pub QueryNumEffects: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        SLAndroidEffectCapabilitiesItf,
                                                                    pNumSupportedEffects:
                                                                        *mut SLuint32)
                                                   -> SLresult>,
    pub QueryEffect: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    SLAndroidEffectCapabilitiesItf,
                                                                index:
                                                                    SLuint32,
                                                                pEffectType:
                                                                    *mut SLInterfaceID,
                                                                pEffectImplementation:
                                                                    *mut SLInterfaceID,
                                                                pName:
                                                                    *mut SLchar,
                                                                pNameSize:
                                                                    *mut SLuint16)
                                               -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidEffectCapabilitiesItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidEffectCapabilitiesItf_>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( SLAndroidEffectCapabilitiesItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAndroidEffectCapabilitiesItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                SLAndroidEffectCapabilitiesItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectCapabilitiesItf_ ) ) .
                QueryNumEffects as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidEffectCapabilitiesItf_ ) , "::" , stringify ! (
                QueryNumEffects ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidEffectCapabilitiesItf_ ) ) .
                QueryEffect as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidEffectCapabilitiesItf_ ) , "::" , stringify ! (
                QueryEffect ) ));
}
impl Clone for SLAndroidEffectCapabilitiesItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidEffectCapabilitiesItf =
    *const *const SLAndroidEffectCapabilitiesItf_;
extern "C" {
    pub static SL_IID_ANDROIDCONFIGURATION: SLInterfaceID;
}
/** Android Configuration interface methods */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidConfigurationItf_ {
    pub SetConfiguration: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidConfigurationItf,
                                                                     configKey:
                                                                         *const SLchar,
                                                                     pConfigValue:
                                                                         *const ::std::os::raw::c_void,
                                                                     valueSize:
                                                                         SLuint32)
                                                    -> SLresult>,
    pub GetConfiguration: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidConfigurationItf,
                                                                     configKey:
                                                                         *const SLchar,
                                                                     pValueSize:
                                                                         *mut SLuint32,
                                                                     pConfigValue:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
    pub AcquireJavaProxy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidConfigurationItf,
                                                                     proxyType:
                                                                         SLuint32,
                                                                     pProxyObj:
                                                                         *mut jobject)
                                                    -> SLresult>,
    pub ReleaseJavaProxy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidConfigurationItf,
                                                                     proxyType:
                                                                         SLuint32)
                                                    -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidConfigurationItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidConfigurationItf_>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAndroidConfigurationItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidConfigurationItf_>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( SLAndroidConfigurationItf_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidConfigurationItf_ ) ) .
                SetConfiguration as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidConfigurationItf_ ) , "::" , stringify ! (
                SetConfiguration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidConfigurationItf_ ) ) .
                GetConfiguration as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidConfigurationItf_ ) , "::" , stringify ! (
                GetConfiguration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidConfigurationItf_ ) ) .
                AcquireJavaProxy as * const _ as usize } , 16usize , concat !
                (
                "Alignment of field: " , stringify ! (
                SLAndroidConfigurationItf_ ) , "::" , stringify ! (
                AcquireJavaProxy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidConfigurationItf_ ) ) .
                ReleaseJavaProxy as * const _ as usize } , 24usize , concat !
                (
                "Alignment of field: " , stringify ! (
                SLAndroidConfigurationItf_ ) , "::" , stringify ! (
                ReleaseJavaProxy ) ));
}
impl Clone for SLAndroidConfigurationItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidConfigurationItf = *const *const SLAndroidConfigurationItf_;
extern "C" {
    pub static SL_IID_ANDROIDSIMPLEBUFFERQUEUE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidSimpleBufferQueueItf_ {
    pub Enqueue: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLAndroidSimpleBufferQueueItf,
                                                            pBuffer:
                                                                *const ::std::os::raw::c_void,
                                                            size: SLuint32)
                                           -> SLresult>,
    pub Clear: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              SLAndroidSimpleBufferQueueItf)
                                         -> SLresult>,
    pub GetState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLAndroidSimpleBufferQueueItf,
                                                             pState:
                                                                 *mut SLAndroidSimpleBufferQueueState)
                                            -> SLresult>,
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidSimpleBufferQueueItf,
                                                                     callback:
                                                                         slAndroidSimpleBufferQueueCallback,
                                                                     pContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidSimpleBufferQueueItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidSimpleBufferQueueItf_>() ,
               32usize , concat ! (
               "Size of: " , stringify ! ( SLAndroidSimpleBufferQueueItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAndroidSimpleBufferQueueItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( SLAndroidSimpleBufferQueueItf_
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidSimpleBufferQueueItf_ ) ) .
                Enqueue as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidSimpleBufferQueueItf_ ) , "::" , stringify ! (
                Enqueue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidSimpleBufferQueueItf_ ) ) .
                Clear as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidSimpleBufferQueueItf_ ) , "::" , stringify ! ( Clear
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidSimpleBufferQueueItf_ ) ) .
                GetState as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidSimpleBufferQueueItf_ ) , "::" , stringify ! (
                GetState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidSimpleBufferQueueItf_ ) ) .
                RegisterCallback as * const _ as usize } , 24usize , concat !
                (
                "Alignment of field: " , stringify ! (
                SLAndroidSimpleBufferQueueItf_ ) , "::" , stringify ! (
                RegisterCallback ) ));
}
impl Clone for SLAndroidSimpleBufferQueueItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidSimpleBufferQueueItf =
    *const *const SLAndroidSimpleBufferQueueItf_;
pub type slAndroidSimpleBufferQueueCallback =
    ::std::option::Option<unsafe extern "C" fn(caller:
                                                   SLAndroidSimpleBufferQueueItf,
                                               pContext:
                                                   *mut ::std::os::raw::c_void)>;
/** Android simple buffer queue state **/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidSimpleBufferQueueState_ {
    pub count: SLuint32,
    pub index: SLuint32,
}
#[test]
fn bindgen_test_layout_SLAndroidSimpleBufferQueueState_() {
    assert_eq!(::std::mem::size_of::<SLAndroidSimpleBufferQueueState_>() ,
               8usize , concat ! (
               "Size of: " , stringify ! ( SLAndroidSimpleBufferQueueState_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAndroidSimpleBufferQueueState_>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                SLAndroidSimpleBufferQueueState_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidSimpleBufferQueueState_ ) ) .
                count as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidSimpleBufferQueueState_ ) , "::" , stringify ! (
                count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidSimpleBufferQueueState_ ) ) .
                index as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidSimpleBufferQueueState_ ) , "::" , stringify ! (
                index ) ));
}
impl Clone for SLAndroidSimpleBufferQueueState_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidSimpleBufferQueueState = SLAndroidSimpleBufferQueueState_;
extern "C" {
    pub static SL_IID_ANDROIDBUFFERQUEUESOURCE: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidBufferQueueItf_ {
    pub RegisterCallback: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         SLAndroidBufferQueueItf,
                                                                     callback:
                                                                         slAndroidBufferQueueCallback,
                                                                     pCallbackContext:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> SLresult>,
    pub Clear: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              SLAndroidBufferQueueItf)
                                         -> SLresult>,
    pub Enqueue: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                SLAndroidBufferQueueItf,
                                                            pBufferContext:
                                                                *mut ::std::os::raw::c_void,
                                                            pData:
                                                                *mut ::std::os::raw::c_void,
                                                            dataLength:
                                                                SLuint32,
                                                            pItems:
                                                                *const SLAndroidBufferItem,
                                                            itemsLength:
                                                                SLuint32)
                                           -> SLresult>,
    pub GetState: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 SLAndroidBufferQueueItf,
                                                             pState:
                                                                 *mut SLAndroidBufferQueueState)
                                            -> SLresult>,
    pub SetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLAndroidBufferQueueItf,
                                                                          eventFlags:
                                                                              SLuint32)
                                                         -> SLresult>,
    pub GetCallbackEventsMask: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              SLAndroidBufferQueueItf,
                                                                          pEventFlags:
                                                                              *mut SLuint32)
                                                         -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidBufferQueueItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidBufferQueueItf_>() , 48usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAndroidBufferQueueItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidBufferQueueItf_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAndroidBufferQueueItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueItf_ ) ) .
                RegisterCallback as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueItf_ ) , "::" , stringify ! (
                RegisterCallback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueItf_ ) ) . Clear as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueItf_ ) , "::" , stringify ! ( Clear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueItf_ ) ) . Enqueue as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueItf_ ) , "::" , stringify ! ( Enqueue )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueItf_ ) ) . GetState
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueItf_ ) , "::" , stringify ! ( GetState )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueItf_ ) ) .
                SetCallbackEventsMask as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueItf_ ) , "::" , stringify ! (
                SetCallbackEventsMask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueItf_ ) ) .
                GetCallbackEventsMask as * const _ as usize } , 40usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueItf_ ) , "::" , stringify ! (
                GetCallbackEventsMask ) ));
}
impl Clone for SLAndroidBufferQueueItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidBufferQueueItf = *const *const SLAndroidBufferQueueItf_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidBufferItem_ {
    pub itemKey: SLuint32,
    pub itemSize: SLuint32,
    pub itemData: __IncompleteArrayField<SLuint8>,
}
#[test]
fn bindgen_test_layout_SLAndroidBufferItem_() {
    assert_eq!(::std::mem::size_of::<SLAndroidBufferItem_>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( SLAndroidBufferItem_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidBufferItem_>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLAndroidBufferItem_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferItem_ ) ) . itemKey as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidBufferItem_ )
                , "::" , stringify ! ( itemKey ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferItem_ ) ) . itemSize as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidBufferItem_ )
                , "::" , stringify ! ( itemSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferItem_ ) ) . itemData as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SLAndroidBufferItem_ )
                , "::" , stringify ! ( itemData ) ));
}
impl Clone for SLAndroidBufferItem_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidBufferItem = SLAndroidBufferItem_;
pub type slAndroidBufferQueueCallback =
    ::std::option::Option<unsafe extern "C" fn(caller:
                                                   SLAndroidBufferQueueItf,
                                               pCallbackContext:
                                                   *mut ::std::os::raw::c_void,
                                               pBufferContext:
                                                   *mut ::std::os::raw::c_void,
                                               pBufferData:
                                                   *mut ::std::os::raw::c_void,
                                               dataSize: SLuint32,
                                               dataUsed: SLuint32,
                                               pItems:
                                                   *const SLAndroidBufferItem,
                                               itemsLength: SLuint32)
                              -> SLresult>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidBufferQueueState_ {
    pub count: SLuint32,
    pub index: SLuint32,
}
#[test]
fn bindgen_test_layout_SLAndroidBufferQueueState_() {
    assert_eq!(::std::mem::size_of::<SLAndroidBufferQueueState_>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( SLAndroidBufferQueueState_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidBufferQueueState_>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( SLAndroidBufferQueueState_ )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueState_ ) ) . count as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueState_ ) , "::" , stringify ! ( count )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidBufferQueueState_ ) ) . index as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidBufferQueueState_ ) , "::" , stringify ! ( index )
                ));
}
impl Clone for SLAndroidBufferQueueState_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidBufferQueueState = SLAndroidBufferQueueState_;
/** File Descriptor-based data locator definition, locatorType must be SL_DATALOCATOR_ANDROIDFD */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_AndroidFD_ {
    pub locatorType: SLuint32,
    pub fd: SLint32,
    pub offset: SLAint64,
    pub length: SLAint64,
}
#[test]
fn bindgen_test_layout_SLDataLocator_AndroidFD_() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_AndroidFD_>() , 24usize ,
               concat ! (
               "Size of: " , stringify ! ( SLDataLocator_AndroidFD_ ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_AndroidFD_>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( SLDataLocator_AndroidFD_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidFD_ ) ) .
                locatorType as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidFD_ ) , "::" , stringify ! ( locatorType
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidFD_ ) ) . fd as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidFD_ ) , "::" , stringify ! ( fd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidFD_ ) ) . offset as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidFD_ ) , "::" , stringify ! ( offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidFD_ ) ) . length as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidFD_ ) , "::" , stringify ! ( length ) ));
}
impl Clone for SLDataLocator_AndroidFD_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataLocator_AndroidFD = SLDataLocator_AndroidFD_;
/** BufferQueue-based data locator definition where locatorType must be SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_AndroidSimpleBufferQueue {
    pub locatorType: SLuint32,
    pub numBuffers: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataLocator_AndroidSimpleBufferQueue() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_AndroidSimpleBufferQueue>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               SLDataLocator_AndroidSimpleBufferQueue ) ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_AndroidSimpleBufferQueue>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                SLDataLocator_AndroidSimpleBufferQueue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidSimpleBufferQueue )
                ) . locatorType as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidSimpleBufferQueue ) , "::" , stringify !
                ( locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidSimpleBufferQueue )
                ) . numBuffers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidSimpleBufferQueue ) , "::" , stringify !
                ( numBuffers ) ));
}
impl Clone for SLDataLocator_AndroidSimpleBufferQueue {
    fn clone(&self) -> Self { *self }
}
/** Android Buffer Queue-based data locator definition,
 *  locatorType must be SL_DATALOCATOR_ANDROIDBUFFERQUEUE */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLDataLocator_AndroidBufferQueue_ {
    pub locatorType: SLuint32,
    pub numBuffers: SLuint32,
}
#[test]
fn bindgen_test_layout_SLDataLocator_AndroidBufferQueue_() {
    assert_eq!(::std::mem::size_of::<SLDataLocator_AndroidBufferQueue_>() ,
               8usize , concat ! (
               "Size of: " , stringify ! ( SLDataLocator_AndroidBufferQueue_ )
               ));
    assert_eq! (::std::mem::align_of::<SLDataLocator_AndroidBufferQueue_>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                SLDataLocator_AndroidBufferQueue_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidBufferQueue_ ) ) .
                locatorType as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidBufferQueue_ ) , "::" , stringify ! (
                locatorType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLDataLocator_AndroidBufferQueue_ ) ) .
                numBuffers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLDataLocator_AndroidBufferQueue_ ) , "::" , stringify ! (
                numBuffers ) ));
}
impl Clone for SLDataLocator_AndroidBufferQueue_ {
    fn clone(&self) -> Self { *self }
}
pub type SLDataLocator_AndroidBufferQueue = SLDataLocator_AndroidBufferQueue_;
extern "C" {
    pub static SL_IID_ANDROIDACOUSTICECHOCANCELLATION: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidAcousticEchoCancellationItf_ {
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLAndroidAcousticEchoCancellationItf,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLAndroidAcousticEchoCancellationItf,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidAcousticEchoCancellationItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidAcousticEchoCancellationItf_>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               SLAndroidAcousticEchoCancellationItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidAcousticEchoCancellationItf_>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                SLAndroidAcousticEchoCancellationItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidAcousticEchoCancellationItf_ ) )
                . SetEnabled as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidAcousticEchoCancellationItf_ ) , "::" , stringify ! (
                SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidAcousticEchoCancellationItf_ ) )
                . IsEnabled as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidAcousticEchoCancellationItf_ ) , "::" , stringify ! (
                IsEnabled ) ));
}
impl Clone for SLAndroidAcousticEchoCancellationItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidAcousticEchoCancellationItf =
    *const *const SLAndroidAcousticEchoCancellationItf_;
extern "C" {
    pub static SL_IID_ANDROIDAUTOMATICGAINCONTROL: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidAutomaticGainControlItf_ {
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLAndroidAutomaticGainControlItf,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLAndroidAutomaticGainControlItf,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidAutomaticGainControlItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidAutomaticGainControlItf_>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( SLAndroidAutomaticGainControlItf_ )
               ));
    assert_eq! (::std::mem::align_of::<SLAndroidAutomaticGainControlItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                SLAndroidAutomaticGainControlItf_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidAutomaticGainControlItf_ ) ) .
                SetEnabled as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidAutomaticGainControlItf_ ) , "::" , stringify ! (
                SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidAutomaticGainControlItf_ ) ) .
                IsEnabled as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidAutomaticGainControlItf_ ) , "::" , stringify ! (
                IsEnabled ) ));
}
impl Clone for SLAndroidAutomaticGainControlItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidAutomaticGainControlItf =
    *const *const SLAndroidAutomaticGainControlItf_;
extern "C" {
    pub static SL_IID_ANDROIDNOISESUPPRESSION: SLInterfaceID;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SLAndroidNoiseSuppressionItf_ {
    pub SetEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   SLAndroidNoiseSuppressionItf,
                                                               enabled:
                                                                   SLboolean)
                                              -> SLresult>,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  SLAndroidNoiseSuppressionItf,
                                                              pEnabled:
                                                                  *mut SLboolean)
                                             -> SLresult>,
}
#[test]
fn bindgen_test_layout_SLAndroidNoiseSuppressionItf_() {
    assert_eq!(::std::mem::size_of::<SLAndroidNoiseSuppressionItf_>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( SLAndroidNoiseSuppressionItf_ ) ));
    assert_eq! (::std::mem::align_of::<SLAndroidNoiseSuppressionItf_>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( SLAndroidNoiseSuppressionItf_
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidNoiseSuppressionItf_ ) ) .
                SetEnabled as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidNoiseSuppressionItf_ ) , "::" , stringify ! (
                SetEnabled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SLAndroidNoiseSuppressionItf_ ) ) .
                IsEnabled as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                SLAndroidNoiseSuppressionItf_ ) , "::" , stringify ! (
                IsEnabled ) ));
}
impl Clone for SLAndroidNoiseSuppressionItf_ {
    fn clone(&self) -> Self { *self }
}
pub type SLAndroidNoiseSuppressionItf =
    *const *const SLAndroidNoiseSuppressionItf_;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
